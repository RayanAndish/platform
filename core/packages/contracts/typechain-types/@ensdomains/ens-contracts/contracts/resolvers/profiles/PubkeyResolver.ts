/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface PubkeyResolverInterface extends Interface {
  getFunction(
    nameOrSignature: "pubkey" | "setPubkey" | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;

  encodeFunctionData(functionFragment: "pubkey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setPubkey",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace PubkeyChangedEvent {
  export type InputTuple = [node: BytesLike, x: BytesLike, y: BytesLike];
  export type OutputTuple = [node: string, x: string, y: string];
  export interface OutputObject {
    node: string;
    x: string;
    y: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PubkeyResolver extends BaseContract {
  connect(runner?: ContractRunner | null): PubkeyResolver;
  waitForDeployment(): Promise<this>;

  interface: PubkeyResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  pubkey: TypedContractMethod<
    [node: BytesLike],
    [[string, string] & { x: string; y: string }],
    "view"
  >;

  setPubkey: TypedContractMethod<
    [node: BytesLike, x: BytesLike, y: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "pubkey"
  ): TypedContractMethod<
    [node: BytesLike],
    [[string, string] & { x: string; y: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPubkey"
  ): TypedContractMethod<
    [node: BytesLike, x: BytesLike, y: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;

  getEvent(
    key: "PubkeyChanged"
  ): TypedContractEvent<
    PubkeyChangedEvent.InputTuple,
    PubkeyChangedEvent.OutputTuple,
    PubkeyChangedEvent.OutputObject
  >;

  filters: {
    "PubkeyChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;
    PubkeyChanged: TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;
  };
}
