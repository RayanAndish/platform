/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace Consensus {
  export type ConsensusParamsStruct = {
    minValidators: BigNumberish;
    maxValidators: BigNumberish;
    validationThreshold: BigNumberish;
    minStake: BigNumberish;
    rewardRate: BigNumberish;
    slashRate: BigNumberish;
    validationTimeout: BigNumberish;
    epochDuration: BigNumberish;
  };

  export type ConsensusParamsStructOutput = [
    minValidators: bigint,
    maxValidators: bigint,
    validationThreshold: bigint,
    minStake: bigint,
    rewardRate: bigint,
    slashRate: bigint,
    validationTimeout: bigint,
    epochDuration: bigint
  ] & {
    minValidators: bigint;
    maxValidators: bigint;
    validationThreshold: bigint;
    minStake: bigint;
    rewardRate: bigint;
    slashRate: bigint;
    validationTimeout: bigint;
    epochDuration: bigint;
  };

  export type ValidationStatsStruct = {
    avgResponseTime: BigNumberish;
    accuracyRate: BigNumberish;
    consistencyScore: BigNumberish;
    aiConfidenceScore: BigNumberish;
    lastUpdateBlock: BigNumberish;
  };

  export type ValidationStatsStructOutput = [
    avgResponseTime: bigint,
    accuracyRate: bigint,
    consistencyScore: bigint,
    aiConfidenceScore: bigint,
    lastUpdateBlock: bigint
  ] & {
    avgResponseTime: bigint;
    accuracyRate: bigint;
    consistencyScore: bigint;
    aiConfidenceScore: bigint;
    lastUpdateBlock: bigint;
  };
}

export interface ConsensusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accControl"
      | "acceptOwnership"
      | "addValidator"
      | "currentEpoch"
      | "epochValidations"
      | "getValidationRound"
      | "getValidatorDetails"
      | "hasher"
      | "lastEpochUpdate"
      | "minParticipation"
      | "owner"
      | "params"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "removeValidator"
      | "renounceOwnership"
      | "requiredReputation"
      | "startValidationRound"
      | "submitValidation"
      | "totalStaked"
      | "transferOwnership"
      | "unpause"
      | "updateAIModel"
      | "updateConsensusParams"
      | "validateTransaction"
      | "validationRounds"
      | "validatorList"
      | "validatorRewards"
      | "validators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIModelUpdated"
      | "ConsensusReached"
      | "EpochUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ReputationUpdated"
      | "RewardsClaimed"
      | "Unpaused"
      | "ValidationRoundStarted"
      | "ValidationStatsUpdated"
      | "ValidationSubmitted"
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "ValidatorSlashed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochValidations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidationRound",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minParticipation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredReputation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startValidationRound",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitValidation",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAIModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsensusParams",
    values: [Consensus.ConsensusParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validationRounds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidationRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startValidationRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAIModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsensusParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export namespace AIModelUpdatedEvent {
  export type InputTuple = [modelVersion: string, timestamp: BigNumberish];
  export type OutputTuple = [modelVersion: string, timestamp: bigint];
  export interface OutputObject {
    modelVersion: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusReachedEvent {
  export type InputTuple = [
    roundId: BytesLike,
    result: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: string,
    result: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: string;
    result: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochUpdatedEvent {
  export type InputTuple = [epoch: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [epoch: bigint, timestamp: bigint];
  export interface OutputObject {
    epoch: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    validator: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    validator: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationRoundStartedEvent {
  export type InputTuple = [
    roundId: BytesLike,
    startTime: BigNumberish,
    requiredValidations: BigNumberish
  ];
  export type OutputTuple = [
    roundId: string,
    startTime: bigint,
    requiredValidations: bigint
  ];
  export interface OutputObject {
    roundId: string;
    startTime: bigint;
    requiredValidations: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationStatsUpdatedEvent {
  export type InputTuple = [
    validator: AddressLike,
    accuracyRate: BigNumberish,
    consistencyScore: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    accuracyRate: bigint,
    consistencyScore: bigint
  ];
  export interface OutputObject {
    validator: string;
    accuracyRate: bigint;
    consistencyScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationSubmittedEvent {
  export type InputTuple = [
    roundId: BytesLike,
    validator: AddressLike,
    result: BytesLike
  ];
  export type OutputTuple = [
    roundId: string,
    validator: string,
    result: string
  ];
  export interface OutputObject {
    roundId: string;
    validator: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [
    validator: AddressLike,
    stake: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    stake: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    validator: string;
    stake: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike, reason: string];
  export type OutputTuple = [validator: string, reason: string];
  export interface OutputObject {
    validator: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorSlashedEvent {
  export type InputTuple = [
    validator: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [validator: string, amount: bigint, reason: string];
  export interface OutputObject {
    validator: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Consensus extends BaseContract {
  connect(runner?: ContractRunner | null): Consensus;
  waitForDeployment(): Promise<this>;

  interface: ConsensusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accControl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addValidator: TypedContractMethod<
    [validatorAddress: AddressLike, stake: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  epochValidations: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getValidationRound: TypedContractMethod<
    [roundId: BytesLike],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        startTime: bigint;
        endTime: bigint;
        requiredValidations: bigint;
        validationCount: bigint;
        isComplete: boolean;
        consensus: boolean;
      }
    ],
    "view"
  >;

  getValidatorDetails: TypedContractMethod<
    [validator: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Consensus.ValidationStatsStructOutput
      ] & {
        stake: bigint;
        reputation: bigint;
        participationCount: bigint;
        successRate: bigint;
        stats: Consensus.ValidationStatsStructOutput;
      }
    ],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  lastEpochUpdate: TypedContractMethod<[], [bigint], "view">;

  minParticipation: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  params: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        minValidators: bigint;
        maxValidators: bigint;
        validationThreshold: bigint;
        minStake: bigint;
        rewardRate: bigint;
        slashRate: bigint;
        validationTimeout: bigint;
        epochDuration: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  removeValidator: TypedContractMethod<
    [validatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredReputation: TypedContractMethod<[], [bigint], "view">;

  startValidationRound: TypedContractMethod<
    [dataHash: BytesLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitValidation: TypedContractMethod<
    [roundId: BytesLike, result: BytesLike],
    [void],
    "nonpayable"
  >;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAIModel: TypedContractMethod<
    [modelVersion: string],
    [void],
    "nonpayable"
  >;

  updateConsensusParams: TypedContractMethod<
    [newParams: Consensus.ConsensusParamsStruct],
    [void],
    "nonpayable"
  >;

  validateTransaction: TypedContractMethod<
    [transactionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  validationRounds: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean] & {
        dataHash: string;
        startTime: bigint;
        endTime: bigint;
        requiredValidations: bigint;
        validationCount: bigint;
        isComplete: boolean;
        consensus: boolean;
      }
    ],
    "view"
  >;

  validatorList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  validatorRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        Consensus.ValidationStatsStructOutput
      ] & {
        validatorAddress: string;
        stake: bigint;
        reputation: bigint;
        participationCount: bigint;
        successfulValidations: bigint;
        failedValidations: bigint;
        lastValidation: bigint;
        rewardsClaimed: bigint;
        slashCount: bigint;
        isActive: boolean;
        stats: Consensus.ValidationStatsStructOutput;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<
    [validatorAddress: AddressLike, stake: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochValidations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidationRound"
  ): TypedContractMethod<
    [roundId: BytesLike],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        startTime: bigint;
        endTime: bigint;
        requiredValidations: bigint;
        validationCount: bigint;
        isComplete: boolean;
        consensus: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorDetails"
  ): TypedContractMethod<
    [validator: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Consensus.ValidationStatsStructOutput
      ] & {
        stake: bigint;
        reputation: bigint;
        participationCount: bigint;
        successRate: bigint;
        stats: Consensus.ValidationStatsStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastEpochUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minParticipation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        minValidators: bigint;
        maxValidators: bigint;
        validationThreshold: bigint;
        minStake: bigint;
        rewardRate: bigint;
        slashRate: bigint;
        validationTimeout: bigint;
        epochDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[validatorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredReputation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startValidationRound"
  ): TypedContractMethod<
    [dataHash: BytesLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitValidation"
  ): TypedContractMethod<
    [roundId: BytesLike, result: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAIModel"
  ): TypedContractMethod<[modelVersion: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConsensusParams"
  ): TypedContractMethod<
    [newParams: Consensus.ConsensusParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransaction"
  ): TypedContractMethod<[transactionHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validationRounds"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean] & {
        dataHash: string;
        startTime: bigint;
        endTime: bigint;
        requiredValidations: bigint;
        validationCount: bigint;
        isComplete: boolean;
        consensus: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "validatorRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        Consensus.ValidationStatsStructOutput
      ] & {
        validatorAddress: string;
        stake: bigint;
        reputation: bigint;
        participationCount: bigint;
        successfulValidations: bigint;
        failedValidations: bigint;
        lastValidation: bigint;
        rewardsClaimed: bigint;
        slashCount: bigint;
        isActive: boolean;
        stats: Consensus.ValidationStatsStructOutput;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AIModelUpdated"
  ): TypedContractEvent<
    AIModelUpdatedEvent.InputTuple,
    AIModelUpdatedEvent.OutputTuple,
    AIModelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusReached"
  ): TypedContractEvent<
    ConsensusReachedEvent.InputTuple,
    ConsensusReachedEvent.OutputTuple,
    ConsensusReachedEvent.OutputObject
  >;
  getEvent(
    key: "EpochUpdated"
  ): TypedContractEvent<
    EpochUpdatedEvent.InputTuple,
    EpochUpdatedEvent.OutputTuple,
    EpochUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationRoundStarted"
  ): TypedContractEvent<
    ValidationRoundStartedEvent.InputTuple,
    ValidationRoundStartedEvent.OutputTuple,
    ValidationRoundStartedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationStatsUpdated"
  ): TypedContractEvent<
    ValidationStatsUpdatedEvent.InputTuple,
    ValidationStatsUpdatedEvent.OutputTuple,
    ValidationStatsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationSubmitted"
  ): TypedContractEvent<
    ValidationSubmittedEvent.InputTuple,
    ValidationSubmittedEvent.OutputTuple,
    ValidationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorSlashed"
  ): TypedContractEvent<
    ValidatorSlashedEvent.InputTuple,
    ValidatorSlashedEvent.OutputTuple,
    ValidatorSlashedEvent.OutputObject
  >;

  filters: {
    "AIModelUpdated(string,uint256)": TypedContractEvent<
      AIModelUpdatedEvent.InputTuple,
      AIModelUpdatedEvent.OutputTuple,
      AIModelUpdatedEvent.OutputObject
    >;
    AIModelUpdated: TypedContractEvent<
      AIModelUpdatedEvent.InputTuple,
      AIModelUpdatedEvent.OutputTuple,
      AIModelUpdatedEvent.OutputObject
    >;

    "ConsensusReached(bytes32,bytes32,uint256)": TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;
    ConsensusReached: TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;

    "EpochUpdated(uint256,uint256)": TypedContractEvent<
      EpochUpdatedEvent.InputTuple,
      EpochUpdatedEvent.OutputTuple,
      EpochUpdatedEvent.OutputObject
    >;
    EpochUpdated: TypedContractEvent<
      EpochUpdatedEvent.InputTuple,
      EpochUpdatedEvent.OutputTuple,
      EpochUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValidationRoundStarted(bytes32,uint256,uint256)": TypedContractEvent<
      ValidationRoundStartedEvent.InputTuple,
      ValidationRoundStartedEvent.OutputTuple,
      ValidationRoundStartedEvent.OutputObject
    >;
    ValidationRoundStarted: TypedContractEvent<
      ValidationRoundStartedEvent.InputTuple,
      ValidationRoundStartedEvent.OutputTuple,
      ValidationRoundStartedEvent.OutputObject
    >;

    "ValidationStatsUpdated(address,uint256,uint256)": TypedContractEvent<
      ValidationStatsUpdatedEvent.InputTuple,
      ValidationStatsUpdatedEvent.OutputTuple,
      ValidationStatsUpdatedEvent.OutputObject
    >;
    ValidationStatsUpdated: TypedContractEvent<
      ValidationStatsUpdatedEvent.InputTuple,
      ValidationStatsUpdatedEvent.OutputTuple,
      ValidationStatsUpdatedEvent.OutputObject
    >;

    "ValidationSubmitted(bytes32,address,bytes32)": TypedContractEvent<
      ValidationSubmittedEvent.InputTuple,
      ValidationSubmittedEvent.OutputTuple,
      ValidationSubmittedEvent.OutputObject
    >;
    ValidationSubmitted: TypedContractEvent<
      ValidationSubmittedEvent.InputTuple,
      ValidationSubmittedEvent.OutputTuple,
      ValidationSubmittedEvent.OutputObject
    >;

    "ValidatorAdded(address,uint256,uint256)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address,string)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "ValidatorSlashed(address,uint256,string)": TypedContractEvent<
      ValidatorSlashedEvent.InputTuple,
      ValidatorSlashedEvent.OutputTuple,
      ValidatorSlashedEvent.OutputObject
    >;
    ValidatorSlashed: TypedContractEvent<
      ValidatorSlashedEvent.InputTuple,
      ValidatorSlashedEvent.OutputTuple,
      ValidatorSlashedEvent.OutputObject
    >;
  };
}
