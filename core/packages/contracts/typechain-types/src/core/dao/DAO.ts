/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: BigNumberish;
    who: AddressLike;
    permissionId: BytesLike;
  };

  export type SingleTargetPermissionStructOutput = [
    operation: bigint,
    who: string,
    permissionId: string
  ] & { operation: bigint; who: string; permissionId: string };
}

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXECUTE_PERMISSION_ID"
      | "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
      | "ROOT_PERMISSION_ID"
      | "SET_METADATA_PERMISSION_ID"
      | "SET_TRUSTED_FORWARDER_PERMISSION_ID"
      | "UPGRADE_DAO_PERMISSION_ID"
      | "accControl"
      | "acceptOwnership"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "createProposal"
      | "daoURI"
      | "deposit"
      | "executeProposal"
      | "getProposal"
      | "getTrustedForwarder"
      | "grant"
      | "hasPermission"
      | "hasher"
      | "initialize"
      | "isValidSignature"
      | "metadata"
      | "owner"
      | "pendingOwner"
      | "projectCount"
      | "projects"
      | "proposalCount"
      | "proxiableUUID"
      | "registerStandardCallback"
      | "renounceOwnership"
      | "revoke"
      | "setMetadata"
      | "setSignatureValidator"
      | "setTrustedForwarder"
      | "signatureValidator"
      | "tokenAddress"
      | "transferOwnership"
      | "trustedForwarder"
      | "updateVotingThreshold"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vote"
      | "votingThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Deposited"
      | "Initialized"
      | "MetadataSet"
      | "NativeTokenDeposited"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "ProjectCompleted"
      | "ProjectCreated"
      | "ProjectUpdated"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "SignatureValidatorSet"
      | "StandardCallbackRegistered"
      | "TrustedForwarderSet"
      | "Upgraded"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [AddressLike, PermissionLib.SingleTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "metadata", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStandardCallback",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votingThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStandardCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingThreshold",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    _reference: string
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    amount: bigint,
    _reference: string
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
    _reference: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataSetEvent {
  export type InputTuple = [metadata: BytesLike];
  export type OutputTuple = [metadata: string];
  export interface OutputObject {
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeTokenDepositedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCompletedEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    title: string,
    budget: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, title: string, budget: bigint];
  export interface OutputObject {
    projectId: bigint;
    title: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectUpdatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    title: string,
    budget: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, title: string, budget: bigint];
  export interface OutputObject {
    projectId: bigint;
    title: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    description: string,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    description: string,
    deadline: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    description: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, success: boolean];
  export type OutputTuple = [proposalId: bigint, success: boolean];
  export interface OutputObject {
    proposalId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureValidatorSetEvent {
  export type InputTuple = [signatureValidator: AddressLike];
  export type OutputTuple = [signatureValidator: string];
  export interface OutputObject {
    signatureValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StandardCallbackRegisteredEvent {
  export type InputTuple = [
    interfaceId: BytesLike,
    callbackSelector: BytesLike,
    magicNumber: BytesLike
  ];
  export type OutputTuple = [
    interfaceId: string,
    callbackSelector: string,
    magicNumber: string
  ];
  export interface OutputObject {
    interfaceId: string;
    callbackSelector: string;
    magicNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedForwarderSetEvent {
  export type InputTuple = [forwarder: AddressLike];
  export type OutputTuple = [forwarder: string];
  export interface OutputObject {
    forwarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: boolean
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: boolean
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXECUTE_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  REGISTER_STANDARD_CALLBACK_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  ROOT_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_METADATA_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_TRUSTED_FORWARDER_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  UPGRADE_DAO_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  accControl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  applyMultiTargetPermissions: TypedContractMethod<
    [_permissions: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "view"
  >;

  applySingleTargetPermissions: TypedContractMethod<
    [
      _target: AddressLike,
      _items: PermissionLib.SingleTargetPermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [description: string, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  daoURI: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _ref: string],
    [void],
    "payable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        description: string;
        deadline: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getTrustedForwarder: TypedContractMethod<[], [string], "view">;

  grant: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "view"
  >;

  hasPermission: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _metadata: BytesLike,
      _initialOwner: AddressLike,
      _trustedForwarder: AddressLike,
      _daoURI: string
    ],
    [void],
    "nonpayable"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "nonpayable"
  >;

  metadata: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, bigint] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        active: boolean;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerStandardCallback: TypedContractMethod<
    [
      _interfaceId: BytesLike,
      _callbackSelector: BytesLike,
      _magicNumber: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revoke: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "view"
  >;

  setMetadata: TypedContractMethod<
    [_metadata: BytesLike],
    [void],
    "nonpayable"
  >;

  setSignatureValidator: TypedContractMethod<
    [_signatureValidator: AddressLike],
    [void],
    "nonpayable"
  >;

  setTrustedForwarder: TypedContractMethod<
    [_trustedForwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  signatureValidator: TypedContractMethod<[], [string], "view">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  updateVotingThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  votingThreshold: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXECUTE_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_METADATA_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_TRUSTED_FORWARDER_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_DAO_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "applyMultiTargetPermissions"
  ): TypedContractMethod<
    [_permissions: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "applySingleTargetPermissions"
  ): TypedContractMethod<
    [
      _target: AddressLike,
      _items: PermissionLib.SingleTargetPermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [description: string, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _ref: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        description: string;
        deadline: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _metadata: BytesLike,
      _initialOwner: AddressLike,
      _trustedForwarder: AddressLike,
      _daoURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metadata"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, bigint] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        active: boolean;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerStandardCallback"
  ): TypedContractMethod<
    [
      _interfaceId: BytesLike,
      _callbackSelector: BytesLike,
      _magicNumber: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<[_metadata: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSignatureValidator"
  ): TypedContractMethod<
    [_signatureValidator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedForwarder"
  ): TypedContractMethod<
    [_trustedForwarder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signatureValidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateVotingThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingThreshold"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataSet"
  ): TypedContractEvent<
    MetadataSetEvent.InputTuple,
    MetadataSetEvent.OutputTuple,
    MetadataSetEvent.OutputObject
  >;
  getEvent(
    key: "NativeTokenDeposited"
  ): TypedContractEvent<
    NativeTokenDepositedEvent.InputTuple,
    NativeTokenDepositedEvent.OutputTuple,
    NativeTokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCompleted"
  ): TypedContractEvent<
    ProjectCompletedEvent.InputTuple,
    ProjectCompletedEvent.OutputTuple,
    ProjectCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectUpdated"
  ): TypedContractEvent<
    ProjectUpdatedEvent.InputTuple,
    ProjectUpdatedEvent.OutputTuple,
    ProjectUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureValidatorSet"
  ): TypedContractEvent<
    SignatureValidatorSetEvent.InputTuple,
    SignatureValidatorSetEvent.OutputTuple,
    SignatureValidatorSetEvent.OutputObject
  >;
  getEvent(
    key: "StandardCallbackRegistered"
  ): TypedContractEvent<
    StandardCallbackRegisteredEvent.InputTuple,
    StandardCallbackRegisteredEvent.OutputTuple,
    StandardCallbackRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedForwarderSet"
  ): TypedContractEvent<
    TrustedForwarderSetEvent.InputTuple,
    TrustedForwarderSetEvent.OutputTuple,
    TrustedForwarderSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Deposited(address,address,uint256,string)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetadataSet(bytes)": TypedContractEvent<
      MetadataSetEvent.InputTuple,
      MetadataSetEvent.OutputTuple,
      MetadataSetEvent.OutputObject
    >;
    MetadataSet: TypedContractEvent<
      MetadataSetEvent.InputTuple,
      MetadataSetEvent.OutputTuple,
      MetadataSetEvent.OutputObject
    >;

    "NativeTokenDeposited(address,uint256)": TypedContractEvent<
      NativeTokenDepositedEvent.InputTuple,
      NativeTokenDepositedEvent.OutputTuple,
      NativeTokenDepositedEvent.OutputObject
    >;
    NativeTokenDeposited: TypedContractEvent<
      NativeTokenDepositedEvent.InputTuple,
      NativeTokenDepositedEvent.OutputTuple,
      NativeTokenDepositedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCompleted(uint256)": TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;
    ProjectCompleted: TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;

    "ProjectCreated(uint256,string,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectUpdated(uint256,string,uint256)": TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;
    ProjectUpdated: TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;

    "ProposalCreated(uint256,string,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "SignatureValidatorSet(address)": TypedContractEvent<
      SignatureValidatorSetEvent.InputTuple,
      SignatureValidatorSetEvent.OutputTuple,
      SignatureValidatorSetEvent.OutputObject
    >;
    SignatureValidatorSet: TypedContractEvent<
      SignatureValidatorSetEvent.InputTuple,
      SignatureValidatorSetEvent.OutputTuple,
      SignatureValidatorSetEvent.OutputObject
    >;

    "StandardCallbackRegistered(bytes4,bytes4,bytes4)": TypedContractEvent<
      StandardCallbackRegisteredEvent.InputTuple,
      StandardCallbackRegisteredEvent.OutputTuple,
      StandardCallbackRegisteredEvent.OutputObject
    >;
    StandardCallbackRegistered: TypedContractEvent<
      StandardCallbackRegisteredEvent.InputTuple,
      StandardCallbackRegisteredEvent.OutputTuple,
      StandardCallbackRegisteredEvent.OutputObject
    >;

    "TrustedForwarderSet(address)": TypedContractEvent<
      TrustedForwarderSetEvent.InputTuple,
      TrustedForwarderSetEvent.OutputTuple,
      TrustedForwarderSetEvent.OutputObject
    >;
    TrustedForwarderSet: TypedContractEvent<
      TrustedForwarderSetEvent.InputTuple,
      TrustedForwarderSetEvent.OutputTuple,
      TrustedForwarderSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VoteCast(address,uint256,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
