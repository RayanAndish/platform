/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface IDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXECUTE_PERMISSION_ID"
      | "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
      | "ROOT_PERMISSION_ID"
      | "SET_METADATA_PERMISSION_ID"
      | "SET_TRUSTED_FORWARDER_PERMISSION_ID"
      | "UPGRADE_DAO_PERMISSION_ID"
      | "grant"
      | "revoke"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
}

export interface IDAO extends BaseContract {
  connect(runner?: ContractRunner | null): IDAO;
  waitForDeployment(): Promise<this>;

  interface: IDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXECUTE_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  REGISTER_STANDARD_CALLBACK_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  ROOT_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_METADATA_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_TRUSTED_FORWARDER_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  UPGRADE_DAO_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  grant: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXECUTE_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_METADATA_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_TRUSTED_FORWARDER_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_DAO_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
