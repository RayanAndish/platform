/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ProjectMonInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accControl"
      | "acceptOwnership"
      | "hasher"
      | "owner"
      | "pendingOwner"
      | "projectCount"
      | "projectHashes"
      | "projects"
      | "registerProject"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateProjectStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "ProjectCompleted"
      | "ProjectCreated"
      | "ProjectRegistered"
      | "ProjectUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProject",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectStatus",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectStatus",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCompletedEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    title: string,
    budget: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, title: string, budget: bigint];
  export interface OutputObject {
    projectId: bigint;
    title: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectRegisteredEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    title: string,
    owner: AddressLike,
    hash: BytesLike
  ];
  export type OutputTuple = [
    projectId: bigint,
    title: string,
    owner: string,
    hash: string
  ];
  export interface OutputObject {
    projectId: bigint;
    title: string;
    owner: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectUpdatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    title: string,
    budget: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, title: string, budget: bigint];
  export interface OutputObject {
    projectId: bigint;
    title: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProjectMon extends BaseContract {
  connect(runner?: ContractRunner | null): ProjectMon;
  waitForDeployment(): Promise<this>;

  interface: ProjectMonInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accControl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  hasher: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projectHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        active: boolean;
        startTime: bigint;
        endTime: bigint;
        owner: string;
        hash: string;
      }
    ],
    "view"
  >;

  registerProject: TypedContractMethod<
    [title: string, description: string, budget: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProjectStatus: TypedContractMethod<
    [projectId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        active: boolean;
        startTime: bigint;
        endTime: bigint;
        owner: string;
        hash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerProject"
  ): TypedContractMethod<
    [title: string, description: string, budget: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProjectStatus"
  ): TypedContractMethod<
    [projectId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCompleted"
  ): TypedContractEvent<
    ProjectCompletedEvent.InputTuple,
    ProjectCompletedEvent.OutputTuple,
    ProjectCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectRegistered"
  ): TypedContractEvent<
    ProjectRegisteredEvent.InputTuple,
    ProjectRegisteredEvent.OutputTuple,
    ProjectRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectUpdated"
  ): TypedContractEvent<
    ProjectUpdatedEvent.InputTuple,
    ProjectUpdatedEvent.OutputTuple,
    ProjectUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCompleted(uint256)": TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;
    ProjectCompleted: TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;

    "ProjectCreated(uint256,string,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectRegistered(uint256,string,address,bytes32)": TypedContractEvent<
      ProjectRegisteredEvent.InputTuple,
      ProjectRegisteredEvent.OutputTuple,
      ProjectRegisteredEvent.OutputObject
    >;
    ProjectRegistered: TypedContractEvent<
      ProjectRegisteredEvent.InputTuple,
      ProjectRegisteredEvent.OutputTuple,
      ProjectRegisteredEvent.OutputObject
    >;

    "ProjectUpdated(uint256,string,uint256)": TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;
    ProjectUpdated: TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;
  };
}
