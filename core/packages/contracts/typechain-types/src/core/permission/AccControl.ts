/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface AccControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INACTIVITY_PERIOD"
      | "MIN_DAO_STAKE"
      | "MIN_VALIDATOR_STAKE"
      | "REPUTATION_THRESHOLD"
      | "VALIDATION_PENALTY"
      | "VALIDATION_REWARD"
      | "acceptOwnership"
      | "addMember"
      | "checkActivity"
      | "daoNodeAddresses"
      | "daoNodes"
      | "getDAONodeDetails"
      | "getValidatorMetrics"
      | "hasher"
      | "members"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "recordValidation"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateReputation"
      | "usedHashes"
      | "validatorAddresses"
      | "validatorInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DAONodeAdded"
      | "DAONodeRemoved"
      | "MemberAdded"
      | "MemberRemoved"
      | "MemberUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ReputationUpdated"
      | "StakeDeposited"
      | "StakeWithdrawn"
      | "Unpaused"
      | "ValidationPerformed"
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "ValidatorStakeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INACTIVITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DAO_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VALIDATOR_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATION_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATION_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "daoNodeAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoNodes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDAONodeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMetrics",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordValidation",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorInfo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INACTIVITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DAO_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VALIDATOR_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATION_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATION_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoNodeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDAONodeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorInfo",
    data: BytesLike
  ): Result;
}

export namespace DAONodeAddedEvent {
  export type InputTuple = [
    dao: AddressLike,
    stake: BigNumberish,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [dao: string, stake: bigint, votingPower: bigint];
  export interface OutputObject {
    dao: string;
    stake: bigint;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DAONodeRemovedEvent {
  export type InputTuple = [dao: AddressLike];
  export type OutputTuple = [dao: string];
  export interface OutputObject {
    dao: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberAddedEvent {
  export type InputTuple = [
    member: AddressLike,
    role: BigNumberish,
    stake: BigNumberish
  ];
  export type OutputTuple = [member: string, role: bigint, stake: bigint];
  export interface OutputObject {
    member: string;
    role: bigint;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRemovedEvent {
  export type InputTuple = [member: AddressLike, role: BigNumberish];
  export type OutputTuple = [member: string, role: bigint];
  export interface OutputObject {
    member: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberUpdatedEvent {
  export type InputTuple = [
    member: AddressLike,
    role: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    role: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    member: string;
    role: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    member: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    member: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDepositedEvent {
  export type InputTuple = [member: AddressLike, amount: BigNumberish];
  export type OutputTuple = [member: string, amount: bigint];
  export interface OutputObject {
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [member: AddressLike, amount: BigNumberish];
  export type OutputTuple = [member: string, amount: bigint];
  export interface OutputObject {
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationPerformedEvent {
  export type InputTuple = [validator: AddressLike, success: boolean];
  export type OutputTuple = [validator: string, success: boolean];
  export interface OutputObject {
    validator: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [
    validator: AddressLike,
    hash: BytesLike,
    stake: BigNumberish
  ];
  export type OutputTuple = [validator: string, hash: string, stake: bigint];
  export interface OutputObject {
    validator: string;
    hash: string;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorStakeUpdatedEvent {
  export type InputTuple = [validator: AddressLike, newStake: BigNumberish];
  export type OutputTuple = [validator: string, newStake: bigint];
  export interface OutputObject {
    validator: string;
    newStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccControl extends BaseContract {
  connect(runner?: ContractRunner | null): AccControl;
  waitForDeployment(): Promise<this>;

  interface: AccControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INACTIVITY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MIN_DAO_STAKE: TypedContractMethod<[], [bigint], "view">;

  MIN_VALIDATOR_STAKE: TypedContractMethod<[], [bigint], "view">;

  REPUTATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VALIDATION_PENALTY: TypedContractMethod<[], [bigint], "view">;

  VALIDATION_REWARD: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addMember: TypedContractMethod<
    [member: AddressLike, role: BigNumberish, initialStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkActivity: TypedContractMethod<
    [member: AddressLike],
    [void],
    "nonpayable"
  >;

  daoNodeAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  daoNodes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stake: bigint;
        proposalCount: bigint;
        votingPower: bigint;
        lastActivity: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getDAONodeDetails: TypedContractMethod<
    [daoNode: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        stake: bigint;
        votingPower: bigint;
        proposalCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getValidatorMetrics: TypedContractMethod<
    [validator: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        validationCount: bigint;
        successRate: bigint;
        reputation: bigint;
        stake: bigint;
      }
    ],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint, bigint] & {
        role: bigint;
        reputation: bigint;
        lastActivity: bigint;
        isActive: boolean;
        stake: bigint;
        validationCount: bigint;
        successfulValidations: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  recordValidation: TypedContractMethod<
    [validator: AddressLike, success: boolean],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateReputation: TypedContractMethod<
    [member: AddressLike, reputationChange: BigNumberish, isIncrease: boolean],
    [void],
    "nonpayable"
  >;

  usedHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  validatorAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  validatorInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        hash: string;
        stake: bigint;
        validationCount: bigint;
        successfulValidations: bigint;
        lastValidation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INACTIVITY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DAO_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VALIDATOR_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATION_PENALTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATION_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMember"
  ): TypedContractMethod<
    [member: AddressLike, role: BigNumberish, initialStake: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkActivity"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "daoNodeAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "daoNodes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stake: bigint;
        proposalCount: bigint;
        votingPower: bigint;
        lastActivity: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDAONodeDetails"
  ): TypedContractMethod<
    [daoNode: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        stake: bigint;
        votingPower: bigint;
        proposalCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorMetrics"
  ): TypedContractMethod<
    [validator: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        validationCount: bigint;
        successRate: bigint;
        reputation: bigint;
        stake: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint, bigint] & {
        role: bigint;
        reputation: bigint;
        lastActivity: bigint;
        isActive: boolean;
        stake: bigint;
        validationCount: bigint;
        successfulValidations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordValidation"
  ): TypedContractMethod<
    [validator: AddressLike, success: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [member: AddressLike, reputationChange: BigNumberish, isIncrease: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "validatorAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "validatorInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        hash: string;
        stake: bigint;
        validationCount: bigint;
        successfulValidations: bigint;
        lastValidation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DAONodeAdded"
  ): TypedContractEvent<
    DAONodeAddedEvent.InputTuple,
    DAONodeAddedEvent.OutputTuple,
    DAONodeAddedEvent.OutputObject
  >;
  getEvent(
    key: "DAONodeRemoved"
  ): TypedContractEvent<
    DAONodeRemovedEvent.InputTuple,
    DAONodeRemovedEvent.OutputTuple,
    DAONodeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MemberAdded"
  ): TypedContractEvent<
    MemberAddedEvent.InputTuple,
    MemberAddedEvent.OutputTuple,
    MemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRemoved"
  ): TypedContractEvent<
    MemberRemovedEvent.InputTuple,
    MemberRemovedEvent.OutputTuple,
    MemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MemberUpdated"
  ): TypedContractEvent<
    MemberUpdatedEvent.InputTuple,
    MemberUpdatedEvent.OutputTuple,
    MemberUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeDeposited"
  ): TypedContractEvent<
    StakeDepositedEvent.InputTuple,
    StakeDepositedEvent.OutputTuple,
    StakeDepositedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationPerformed"
  ): TypedContractEvent<
    ValidationPerformedEvent.InputTuple,
    ValidationPerformedEvent.OutputTuple,
    ValidationPerformedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorStakeUpdated"
  ): TypedContractEvent<
    ValidatorStakeUpdatedEvent.InputTuple,
    ValidatorStakeUpdatedEvent.OutputTuple,
    ValidatorStakeUpdatedEvent.OutputObject
  >;

  filters: {
    "DAONodeAdded(address,uint256,uint256)": TypedContractEvent<
      DAONodeAddedEvent.InputTuple,
      DAONodeAddedEvent.OutputTuple,
      DAONodeAddedEvent.OutputObject
    >;
    DAONodeAdded: TypedContractEvent<
      DAONodeAddedEvent.InputTuple,
      DAONodeAddedEvent.OutputTuple,
      DAONodeAddedEvent.OutputObject
    >;

    "DAONodeRemoved(address)": TypedContractEvent<
      DAONodeRemovedEvent.InputTuple,
      DAONodeRemovedEvent.OutputTuple,
      DAONodeRemovedEvent.OutputObject
    >;
    DAONodeRemoved: TypedContractEvent<
      DAONodeRemovedEvent.InputTuple,
      DAONodeRemovedEvent.OutputTuple,
      DAONodeRemovedEvent.OutputObject
    >;

    "MemberAdded(address,uint8,uint256)": TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;
    MemberAdded: TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;

    "MemberRemoved(address,uint8)": TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;
    MemberRemoved: TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;

    "MemberUpdated(address,uint8,uint256)": TypedContractEvent<
      MemberUpdatedEvent.InputTuple,
      MemberUpdatedEvent.OutputTuple,
      MemberUpdatedEvent.OutputObject
    >;
    MemberUpdated: TypedContractEvent<
      MemberUpdatedEvent.InputTuple,
      MemberUpdatedEvent.OutputTuple,
      MemberUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "StakeDeposited(address,uint256)": TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;
    StakeDeposited: TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValidationPerformed(address,bool)": TypedContractEvent<
      ValidationPerformedEvent.InputTuple,
      ValidationPerformedEvent.OutputTuple,
      ValidationPerformedEvent.OutputObject
    >;
    ValidationPerformed: TypedContractEvent<
      ValidationPerformedEvent.InputTuple,
      ValidationPerformedEvent.OutputTuple,
      ValidationPerformedEvent.OutputObject
    >;

    "ValidatorAdded(address,bytes32,uint256)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "ValidatorStakeUpdated(address,uint256)": TypedContractEvent<
      ValidatorStakeUpdatedEvent.InputTuple,
      ValidatorStakeUpdatedEvent.OutputTuple,
      ValidatorStakeUpdatedEvent.OutputObject
    >;
    ValidatorStakeUpdated: TypedContractEvent<
      ValidatorStakeUpdatedEvent.InputTuple,
      ValidatorStakeUpdatedEvent.OutputTuple,
      ValidatorStakeUpdatedEvent.OutputObject
    >;
  };
}
