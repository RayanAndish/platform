/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface FinanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INSTALLMENT_PERIOD"
      | "LOCK_PERIOD"
      | "MAX_INVESTMENT"
      | "MIN_INVESTMENT"
      | "MULTI_SIG_THRESHOLD"
      | "accControl"
      | "acceptOwnership"
      | "addPenalty"
      | "addReward"
      | "approveMultiSigTransaction"
      | "createInstallmentPlan"
      | "createMultiSigTransaction"
      | "hasher"
      | "installmentPlans"
      | "invest"
      | "investments"
      | "multiSigTransactionCount"
      | "multiSigTransactions"
      | "owner"
      | "pause"
      | "paused"
      | "payInstallment"
      | "penalties"
      | "pendingOwner"
      | "renounceOwnership"
      | "requiredApprovals"
      | "rewards"
      | "token"
      | "transactionHashes"
      | "transferOwnership"
      | "unpause"
      | "updateRequiredApprovals"
      | "validateTransaction"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InstallmentPaid"
      | "InstallmentPlanCreated"
      | "InvestmentMade"
      | "InvestmentWithdrawn"
      | "MultiSigTransactionApproved"
      | "MultiSigTransactionCreated"
      | "MultiSigTransactionExecuted"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "PenaltyAdded"
      | "RewardAdded"
      | "TransactionValidated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INSTALLMENT_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_INVESTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_INVESTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTI_SIG_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPenalty",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMultiSigTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInstallmentPlan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMultiSigTransaction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "installmentPlans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payInstallment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penalties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactionHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRequiredApprovals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransaction",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INSTALLMENT_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_INVESTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_INVESTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTI_SIG_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPenalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMultiSigTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInstallmentPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMultiSigTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installmentPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payInstallment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRequiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InstallmentPaidEvent {
  export type InputTuple = [
    payer: AddressLike,
    amount: BigNumberish,
    remaining: BigNumberish,
    hash: BytesLike
  ];
  export type OutputTuple = [
    payer: string,
    amount: bigint,
    remaining: bigint,
    hash: string
  ];
  export interface OutputObject {
    payer: string;
    amount: bigint;
    remaining: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstallmentPlanCreatedEvent {
  export type InputTuple = [
    payer: AddressLike,
    totalAmount: BigNumberish,
    numberOfInstallments: BigNumberish,
    hash: BytesLike
  ];
  export type OutputTuple = [
    payer: string,
    totalAmount: bigint,
    numberOfInstallments: bigint,
    hash: string
  ];
  export interface OutputObject {
    payer: string;
    totalAmount: bigint;
    numberOfInstallments: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    investor: AddressLike,
    amount: BigNumberish,
    tier: BigNumberish,
    hash: BytesLike
  ];
  export type OutputTuple = [
    investor: string,
    amount: bigint,
    tier: bigint,
    hash: string
  ];
  export interface OutputObject {
    investor: string;
    amount: bigint;
    tier: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentWithdrawnEvent {
  export type InputTuple = [
    investor: AddressLike,
    amount: BigNumberish,
    rewards: BigNumberish,
    hash: BytesLike
  ];
  export type OutputTuple = [
    investor: string,
    amount: bigint,
    rewards: bigint,
    hash: string
  ];
  export interface OutputObject {
    investor: string;
    amount: bigint;
    rewards: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiSigTransactionApprovedEvent {
  export type InputTuple = [txId: BigNumberish, approver: AddressLike];
  export type OutputTuple = [txId: bigint, approver: string];
  export interface OutputObject {
    txId: bigint;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiSigTransactionCreatedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    initiator: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    hash: BytesLike
  ];
  export type OutputTuple = [
    txId: bigint,
    initiator: string,
    recipient: string,
    amount: bigint,
    hash: string
  ];
  export interface OutputObject {
    txId: bigint;
    initiator: string;
    recipient: string;
    amount: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiSigTransactionExecutedEvent {
  export type InputTuple = [txId: BigNumberish, hash: BytesLike];
  export type OutputTuple = [txId: bigint, hash: string];
  export interface OutputObject {
    txId: bigint;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PenaltyAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: BytesLike
  ];
  export type OutputTuple = [user: string, amount: bigint, reason: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: BytesLike
  ];
  export type OutputTuple = [user: string, amount: bigint, reason: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionValidatedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    validator: AddressLike,
    isValid: boolean,
    validationData: BytesLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    validator: string,
    isValid: boolean,
    validationData: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    validator: string;
    isValid: boolean;
    validationData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Finance extends BaseContract {
  connect(runner?: ContractRunner | null): Finance;
  waitForDeployment(): Promise<this>;

  interface: FinanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INSTALLMENT_PERIOD: TypedContractMethod<[], [bigint], "view">;

  LOCK_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MAX_INVESTMENT: TypedContractMethod<[], [bigint], "view">;

  MIN_INVESTMENT: TypedContractMethod<[], [bigint], "view">;

  MULTI_SIG_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  accControl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addPenalty: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  addReward: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  approveMultiSigTransaction: TypedContractMethod<
    [txId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createInstallmentPlan: TypedContractMethod<
    [totalAmount: BigNumberish, numberOfInstallments: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMultiSigTransaction: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  installmentPlans: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        totalAmount: bigint;
        amountPaid: bigint;
        installmentAmount: bigint;
        nextPaymentDate: bigint;
        numberOfInstallments: bigint;
        remainingInstallments: bigint;
        active: boolean;
        hash: string;
      }
    ],
    "view"
  >;

  invest: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  investments: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, string, bigint] & {
        amount: bigint;
        startTime: bigint;
        lockEndTime: bigint;
        rewards: bigint;
        active: boolean;
        hash: string;
        tier: bigint;
      }
    ],
    "view"
  >;

  multiSigTransactionCount: TypedContractMethod<[], [bigint], "view">;

  multiSigTransactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        initiator: string;
        recipient: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
        status: bigint;
        validationCount: bigint;
        approvalCount: bigint;
        rejectionCount: bigint;
        hash: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payInstallment: TypedContractMethod<[], [void], "nonpayable">;

  penalties: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredApprovals: TypedContractMethod<[], [bigint], "view">;

  rewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  transactionHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateRequiredApprovals: TypedContractMethod<
    [_requiredApprovals: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateTransaction: TypedContractMethod<
    [transactionId: BigNumberish, isValid: boolean, validationData: BytesLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INSTALLMENT_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_INVESTMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_INVESTMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MULTI_SIG_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPenalty"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveMultiSigTransaction"
  ): TypedContractMethod<[txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createInstallmentPlan"
  ): TypedContractMethod<
    [totalAmount: BigNumberish, numberOfInstallments: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMultiSigTransaction"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "installmentPlans"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        totalAmount: bigint;
        amountPaid: bigint;
        installmentAmount: bigint;
        nextPaymentDate: bigint;
        numberOfInstallments: bigint;
        remainingInstallments: bigint;
        active: boolean;
        hash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, string, bigint] & {
        amount: bigint;
        startTime: bigint;
        lockEndTime: bigint;
        rewards: bigint;
        active: boolean;
        hash: string;
        tier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "multiSigTransactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiSigTransactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        initiator: string;
        recipient: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
        status: bigint;
        validationCount: bigint;
        approvalCount: bigint;
        rejectionCount: bigint;
        hash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payInstallment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "penalties"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredApprovals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transactionHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRequiredApprovals"
  ): TypedContractMethod<
    [_requiredApprovals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransaction"
  ): TypedContractMethod<
    [transactionId: BigNumberish, isValid: boolean, validationData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "InstallmentPaid"
  ): TypedContractEvent<
    InstallmentPaidEvent.InputTuple,
    InstallmentPaidEvent.OutputTuple,
    InstallmentPaidEvent.OutputObject
  >;
  getEvent(
    key: "InstallmentPlanCreated"
  ): TypedContractEvent<
    InstallmentPlanCreatedEvent.InputTuple,
    InstallmentPlanCreatedEvent.OutputTuple,
    InstallmentPlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentWithdrawn"
  ): TypedContractEvent<
    InvestmentWithdrawnEvent.InputTuple,
    InvestmentWithdrawnEvent.OutputTuple,
    InvestmentWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "MultiSigTransactionApproved"
  ): TypedContractEvent<
    MultiSigTransactionApprovedEvent.InputTuple,
    MultiSigTransactionApprovedEvent.OutputTuple,
    MultiSigTransactionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "MultiSigTransactionCreated"
  ): TypedContractEvent<
    MultiSigTransactionCreatedEvent.InputTuple,
    MultiSigTransactionCreatedEvent.OutputTuple,
    MultiSigTransactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MultiSigTransactionExecuted"
  ): TypedContractEvent<
    MultiSigTransactionExecutedEvent.InputTuple,
    MultiSigTransactionExecutedEvent.OutputTuple,
    MultiSigTransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PenaltyAdded"
  ): TypedContractEvent<
    PenaltyAddedEvent.InputTuple,
    PenaltyAddedEvent.OutputTuple,
    PenaltyAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionValidated"
  ): TypedContractEvent<
    TransactionValidatedEvent.InputTuple,
    TransactionValidatedEvent.OutputTuple,
    TransactionValidatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "InstallmentPaid(address,uint256,uint256,bytes32)": TypedContractEvent<
      InstallmentPaidEvent.InputTuple,
      InstallmentPaidEvent.OutputTuple,
      InstallmentPaidEvent.OutputObject
    >;
    InstallmentPaid: TypedContractEvent<
      InstallmentPaidEvent.InputTuple,
      InstallmentPaidEvent.OutputTuple,
      InstallmentPaidEvent.OutputObject
    >;

    "InstallmentPlanCreated(address,uint256,uint256,bytes32)": TypedContractEvent<
      InstallmentPlanCreatedEvent.InputTuple,
      InstallmentPlanCreatedEvent.OutputTuple,
      InstallmentPlanCreatedEvent.OutputObject
    >;
    InstallmentPlanCreated: TypedContractEvent<
      InstallmentPlanCreatedEvent.InputTuple,
      InstallmentPlanCreatedEvent.OutputTuple,
      InstallmentPlanCreatedEvent.OutputObject
    >;

    "InvestmentMade(address,uint256,uint8,bytes32)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "InvestmentWithdrawn(address,uint256,uint256,bytes32)": TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;
    InvestmentWithdrawn: TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;

    "MultiSigTransactionApproved(uint256,address)": TypedContractEvent<
      MultiSigTransactionApprovedEvent.InputTuple,
      MultiSigTransactionApprovedEvent.OutputTuple,
      MultiSigTransactionApprovedEvent.OutputObject
    >;
    MultiSigTransactionApproved: TypedContractEvent<
      MultiSigTransactionApprovedEvent.InputTuple,
      MultiSigTransactionApprovedEvent.OutputTuple,
      MultiSigTransactionApprovedEvent.OutputObject
    >;

    "MultiSigTransactionCreated(uint256,address,address,uint256,bytes32)": TypedContractEvent<
      MultiSigTransactionCreatedEvent.InputTuple,
      MultiSigTransactionCreatedEvent.OutputTuple,
      MultiSigTransactionCreatedEvent.OutputObject
    >;
    MultiSigTransactionCreated: TypedContractEvent<
      MultiSigTransactionCreatedEvent.InputTuple,
      MultiSigTransactionCreatedEvent.OutputTuple,
      MultiSigTransactionCreatedEvent.OutputObject
    >;

    "MultiSigTransactionExecuted(uint256,bytes32)": TypedContractEvent<
      MultiSigTransactionExecutedEvent.InputTuple,
      MultiSigTransactionExecutedEvent.OutputTuple,
      MultiSigTransactionExecutedEvent.OutputObject
    >;
    MultiSigTransactionExecuted: TypedContractEvent<
      MultiSigTransactionExecutedEvent.InputTuple,
      MultiSigTransactionExecutedEvent.OutputTuple,
      MultiSigTransactionExecutedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PenaltyAdded(address,uint256,bytes32)": TypedContractEvent<
      PenaltyAddedEvent.InputTuple,
      PenaltyAddedEvent.OutputTuple,
      PenaltyAddedEvent.OutputObject
    >;
    PenaltyAdded: TypedContractEvent<
      PenaltyAddedEvent.InputTuple,
      PenaltyAddedEvent.OutputTuple,
      PenaltyAddedEvent.OutputObject
    >;

    "RewardAdded(address,uint256,bytes32)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "TransactionValidated(uint256,address,bool,bytes)": TypedContractEvent<
      TransactionValidatedEvent.InputTuple,
      TransactionValidatedEvent.OutputTuple,
      TransactionValidatedEvent.OutputObject
    >;
    TransactionValidated: TypedContractEvent<
      TransactionValidatedEvent.InputTuple,
      TransactionValidatedEvent.OutputTuple,
      TransactionValidatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
