/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace Voting {
  export type VotingStrategyStruct = {
    quorumPercentage: BigNumberish;
    minVotingPeriod: BigNumberish;
    maxVotingPeriod: BigNumberish;
    executionDelay: BigNumberish;
    minVotingPower: BigNumberish;
    requiresAIValidation: boolean;
  };

  export type VotingStrategyStructOutput = [
    quorumPercentage: bigint,
    minVotingPeriod: bigint,
    maxVotingPeriod: bigint,
    executionDelay: bigint,
    minVotingPower: bigint,
    requiresAIValidation: boolean
  ] & {
    quorumPercentage: bigint;
    minVotingPeriod: bigint;
    maxVotingPeriod: bigint;
    executionDelay: bigint;
    minVotingPower: bigint;
    requiresAIValidation: boolean;
  };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PROPOSAL_DURATION"
      | "MAX_VOTING_POWER"
      | "MIN_PROPOSAL_DURATION"
      | "VOTE_PRECISION"
      | "accControl"
      | "acceptOwnership"
      | "castVote"
      | "createProposal"
      | "delegateVotingPower"
      | "delegations"
      | "getProposalDetails"
      | "getVoteDetails"
      | "hasher"
      | "lastVoteTime"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "proposalCount"
      | "proposalHashes"
      | "proposals"
      | "renounceOwnership"
      | "reputationScore"
      | "reputationThreshold"
      | "transferOwnership"
      | "unpause"
      | "updateValidatorCount"
      | "updateVotingStrategy"
      | "validatorCount"
      | "votingPower"
      | "votingStrategies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIValidationResult"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ProposalActivated"
      | "ProposalCancelled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ReputationUpdated"
      | "Unpaused"
      | "ValidatorCountUpdated"
      | "VoteCast"
      | "VotingPowerDelegated"
      | "VotingStrategyUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVotingPower",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteDetails",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastVoteTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reputationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateValidatorCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingStrategy",
    values: [BigNumberish, Voting.VotingStrategyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingStrategies",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVoteTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStrategies",
    data: BytesLike
  ): Result;
}

export namespace AIValidationResultEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    validated: boolean,
    reason: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    validated: boolean,
    reason: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    validated: boolean;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalActivatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish, reason: string];
  export type OutputTuple = [proposalId: bigint, reason: string];
  export interface OutputObject {
    proposalId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    title: string,
    creator: AddressLike,
    proposalType: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    title: string,
    creator: string,
    proposalType: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    title: string;
    creator: string;
    proposalType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, success: boolean];
  export type OutputTuple = [proposalId: bigint, success: boolean];
  export interface OutputObject {
    proposalId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    voter: AddressLike,
    oldScore: BigNumberish,
    newScore: BigNumberish
  ];
  export type OutputTuple = [voter: string, oldScore: bigint, newScore: bigint];
  export interface OutputObject {
    voter: string;
    oldScore: bigint;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorCountUpdatedEvent {
  export type InputTuple = [newCount: BigNumberish];
  export type OutputTuple = [newCount: bigint];
  export interface OutputObject {
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    voteType: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    voteType: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    voteType: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerDelegatedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    delegate: AddressLike,
    power: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    delegator: string,
    delegate: string,
    power: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    delegator: string;
    delegate: string;
    power: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStrategyUpdatedEvent {
  export type InputTuple = [
    proposalType: BigNumberish,
    quorum: BigNumberish,
    minPeriod: BigNumberish
  ];
  export type OutputTuple = [
    proposalType: bigint,
    quorum: bigint,
    minPeriod: bigint
  ];
  export interface OutputObject {
    proposalType: bigint;
    quorum: bigint;
    minPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PROPOSAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_VOTING_POWER: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPOSAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  VOTE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  accControl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, voteType: BigNumberish, justification: string],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      title: string,
      description: string,
      proposalType: BigNumberish,
      votingPeriod: BigNumberish,
      isQuadratic: boolean
    ],
    [void],
    "nonpayable"
  >;

  delegateVotingPower: TypedContractMethod<
    [delegate: AddressLike, power: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        delegate: string;
        power: bigint;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getProposalDetails: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        description: string;
        creator: string;
        startTime: bigint;
        endTime: bigint;
        proposalType: bigint;
        status: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        votesAbstain: bigint;
      }
    ],
    "view"
  >;

  getVoteDetails: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        voteType: bigint;
        weight: bigint;
        timestamp: bigint;
        justification: string;
      }
    ],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  lastVoteTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        Voting.VotingStrategyStructOutput
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        startTime: bigint;
        endTime: bigint;
        executionDelay: bigint;
        proposalType: bigint;
        status: bigint;
        hash: string;
        votesFor: bigint;
        votesAgainst: bigint;
        votesAbstain: bigint;
        quorumRequired: bigint;
        isQuadratic: boolean;
        strategy: Voting.VotingStrategyStructOutput;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationScore: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  reputationThreshold: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateValidatorCount: TypedContractMethod<
    [newCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateVotingStrategy: TypedContractMethod<
    [proposalType: BigNumberish, newStrategy: Voting.VotingStrategyStruct],
    [void],
    "nonpayable"
  >;

  validatorCount: TypedContractMethod<[], [bigint], "view">;

  votingPower: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  votingStrategies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        quorumPercentage: bigint;
        minVotingPeriod: bigint;
        maxVotingPeriod: bigint;
        executionDelay: bigint;
        minVotingPower: bigint;
        requiresAIValidation: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PROPOSAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTING_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPOSAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voteType: BigNumberish, justification: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      proposalType: BigNumberish,
      votingPeriod: BigNumberish,
      isQuadratic: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateVotingPower"
  ): TypedContractMethod<
    [delegate: AddressLike, power: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        delegate: string;
        power: bigint;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalDetails"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        description: string;
        creator: string;
        startTime: bigint;
        endTime: bigint;
        proposalType: bigint;
        status: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        votesAbstain: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteDetails"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        voteType: bigint;
        weight: bigint;
        timestamp: bigint;
        justification: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastVoteTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        Voting.VotingStrategyStructOutput
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        startTime: bigint;
        endTime: bigint;
        executionDelay: bigint;
        proposalType: bigint;
        status: bigint;
        hash: string;
        votesFor: bigint;
        votesAgainst: bigint;
        votesAbstain: bigint;
        quorumRequired: bigint;
        isQuadratic: boolean;
        strategy: Voting.VotingStrategyStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "reputationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateValidatorCount"
  ): TypedContractMethod<[newCount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVotingStrategy"
  ): TypedContractMethod<
    [proposalType: BigNumberish, newStrategy: Voting.VotingStrategyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStrategies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        quorumPercentage: bigint;
        minVotingPeriod: bigint;
        maxVotingPeriod: bigint;
        executionDelay: bigint;
        minVotingPower: bigint;
        requiresAIValidation: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AIValidationResult"
  ): TypedContractEvent<
    AIValidationResultEvent.InputTuple,
    AIValidationResultEvent.OutputTuple,
    AIValidationResultEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalActivated"
  ): TypedContractEvent<
    ProposalActivatedEvent.InputTuple,
    ProposalActivatedEvent.OutputTuple,
    ProposalActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCancelled"
  ): TypedContractEvent<
    ProposalCancelledEvent.InputTuple,
    ProposalCancelledEvent.OutputTuple,
    ProposalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorCountUpdated"
  ): TypedContractEvent<
    ValidatorCountUpdatedEvent.InputTuple,
    ValidatorCountUpdatedEvent.OutputTuple,
    ValidatorCountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerDelegated"
  ): TypedContractEvent<
    VotingPowerDelegatedEvent.InputTuple,
    VotingPowerDelegatedEvent.OutputTuple,
    VotingPowerDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStrategyUpdated"
  ): TypedContractEvent<
    VotingStrategyUpdatedEvent.InputTuple,
    VotingStrategyUpdatedEvent.OutputTuple,
    VotingStrategyUpdatedEvent.OutputObject
  >;

  filters: {
    "AIValidationResult(uint256,bool,string)": TypedContractEvent<
      AIValidationResultEvent.InputTuple,
      AIValidationResultEvent.OutputTuple,
      AIValidationResultEvent.OutputObject
    >;
    AIValidationResult: TypedContractEvent<
      AIValidationResultEvent.InputTuple,
      AIValidationResultEvent.OutputTuple,
      AIValidationResultEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProposalActivated(uint256,uint256,uint256)": TypedContractEvent<
      ProposalActivatedEvent.InputTuple,
      ProposalActivatedEvent.OutputTuple,
      ProposalActivatedEvent.OutputObject
    >;
    ProposalActivated: TypedContractEvent<
      ProposalActivatedEvent.InputTuple,
      ProposalActivatedEvent.OutputTuple,
      ProposalActivatedEvent.OutputObject
    >;

    "ProposalCancelled(uint256,string)": TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;
    ProposalCancelled: TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;

    "ProposalCreated(uint256,string,address,uint8)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValidatorCountUpdated(uint256)": TypedContractEvent<
      ValidatorCountUpdatedEvent.InputTuple,
      ValidatorCountUpdatedEvent.OutputTuple,
      ValidatorCountUpdatedEvent.OutputObject
    >;
    ValidatorCountUpdated: TypedContractEvent<
      ValidatorCountUpdatedEvent.InputTuple,
      ValidatorCountUpdatedEvent.OutputTuple,
      ValidatorCountUpdatedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint8,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPowerDelegated(address,address,uint256,uint256)": TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;
    VotingPowerDelegated: TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;

    "VotingStrategyUpdated(uint8,uint256,uint256)": TypedContractEvent<
      VotingStrategyUpdatedEvent.InputTuple,
      VotingStrategyUpdatedEvent.OutputTuple,
      VotingStrategyUpdatedEvent.OutputObject
    >;
    VotingStrategyUpdated: TypedContractEvent<
      VotingStrategyUpdatedEvent.InputTuple,
      VotingStrategyUpdatedEvent.OutputTuple,
      VotingStrategyUpdatedEvent.OutputObject
    >;
  };
}
