/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: BigNumberish;
    who: AddressLike;
    permissionId: BytesLike;
  };

  export type SingleTargetPermissionStructOutput = [
    operation: bigint,
    who: string,
    permissionId: string
  ] & { operation: bigint; who: string; permissionId: string };
}

export interface PermissionManagerTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROOT_PERMISSION_ID"
      | "TEST_PERMISSION_1_ID"
      | "TEST_PERMISSION_2_ID"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "getAnyAddr"
      | "getAuthPermission"
      | "getPermissionHash"
      | "grant"
      | "grantWithCondition"
      | "hasPermission"
      | "init"
      | "isGranted"
      | "revoke"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Granted" | "Initialized" | "Revoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEST_PERMISSION_1_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEST_PERMISSION_2_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [AddressLike, PermissionLib.SingleTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnyAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthPermission",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionHash",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantWithCondition",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEST_PERMISSION_1_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEST_PERMISSION_2_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnyAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
}

export namespace GrantedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike,
    condition: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string,
    condition: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PermissionManagerTest extends BaseContract {
  connect(runner?: ContractRunner | null): PermissionManagerTest;
  waitForDeployment(): Promise<this>;

  interface: PermissionManagerTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROOT_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  TEST_PERMISSION_1_ID: TypedContractMethod<[], [string], "view">;

  TEST_PERMISSION_2_ID: TypedContractMethod<[], [string], "view">;

  applyMultiTargetPermissions: TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  applySingleTargetPermissions: TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  getAnyAddr: TypedContractMethod<[], [string], "view">;

  getAuthPermission: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [string],
    "view"
  >;

  getPermissionHash: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [string],
    "view"
  >;

  grant: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  grantWithCondition: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  hasPermission: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  init: TypedContractMethod<[_who: AddressLike], [void], "nonpayable">;

  isGranted: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  revoke: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROOT_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TEST_PERMISSION_1_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TEST_PERMISSION_2_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyMultiTargetPermissions"
  ): TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applySingleTargetPermissions"
  ): TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAnyAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAuthPermission"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionHash"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantWithCondition"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[_who: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isGranted"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Granted"
  ): TypedContractEvent<
    GrantedEvent.InputTuple,
    GrantedEvent.OutputTuple,
    GrantedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;

  filters: {
    "Granted(bytes32,address,address,address,address)": TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;
    Granted: TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Revoked(bytes32,address,address,address)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
  };
}
