/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace IPluginSetup {
  export type SetupPayloadStruct = {
    plugin: AddressLike;
    currentHelpers: AddressLike[];
    data: BytesLike;
  };

  export type SetupPayloadStructOutput = [
    plugin: string,
    currentHelpers: string[],
    data: string
  ] & { plugin: string; currentHelpers: string[]; data: string };

  export type PreparedSetupDataStruct = {
    helpers: AddressLike[];
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type PreparedSetupDataStructOutput = [
    helpers: string[],
    permissions: PermissionLib.MultiTargetPermissionStructOutput[]
  ] & {
    helpers: string[];
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };
}

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };
}

export interface PluginUUPSUpgradeableSetupV3MockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "implementation"
      | "mockHelperCount"
      | "mockPermissionIndexes"
      | "prepareInstallation"
      | "prepareUninstallation"
      | "prepareUpdate"
      | "protocolVersion"
      | "reset"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InstallationPrepared"
      | "UninstallationPrepared"
      | "UpdatePrepared"
      | "amazing"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockHelperCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockPermissionIndexes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareInstallation",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUninstallation",
    values: [AddressLike, IPluginSetup.SetupPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUpdate",
    values: [AddressLike, BigNumberish, IPluginSetup.SetupPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockHelperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockPermissionIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUninstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace InstallationPreparedEvent {
  export type InputTuple = [dao: AddressLike, data: BytesLike];
  export type OutputTuple = [dao: string, data: string];
  export interface OutputObject {
    dao: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UninstallationPreparedEvent {
  export type InputTuple = [
    dao: AddressLike,
    payload: IPluginSetup.SetupPayloadStruct
  ];
  export type OutputTuple = [
    dao: string,
    payload: IPluginSetup.SetupPayloadStructOutput
  ];
  export interface OutputObject {
    dao: string;
    payload: IPluginSetup.SetupPayloadStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePreparedEvent {
  export type InputTuple = [
    dao: AddressLike,
    build: BigNumberish,
    payload: IPluginSetup.SetupPayloadStruct
  ];
  export type OutputTuple = [
    dao: string,
    build: bigint,
    payload: IPluginSetup.SetupPayloadStructOutput
  ];
  export interface OutputObject {
    dao: string;
    build: bigint;
    payload: IPluginSetup.SetupPayloadStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace amazingEvent {
  export type InputTuple = [k: BigNumberish];
  export type OutputTuple = [k: bigint];
  export interface OutputObject {
    k: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PluginUUPSUpgradeableSetupV3Mock extends BaseContract {
  connect(runner?: ContractRunner | null): PluginUUPSUpgradeableSetupV3Mock;
  waitForDeployment(): Promise<this>;

  interface: PluginUUPSUpgradeableSetupV3MockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  implementation: TypedContractMethod<[], [string], "view">;

  mockHelperCount: TypedContractMethod<
    [_helpersCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mockPermissionIndexes: TypedContractMethod<
    [_lowerIndex: BigNumberish, _upperIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  prepareInstallation: TypedContractMethod<
    [_dao: AddressLike, _data: BytesLike],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        plugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;

  prepareUninstallation: TypedContractMethod<
    [_dao: AddressLike, _payload: IPluginSetup.SetupPayloadStruct],
    [PermissionLib.MultiTargetPermissionStructOutput[]],
    "nonpayable"
  >;

  prepareUpdate: TypedContractMethod<
    [
      _dao: AddressLike,
      _currentBuild: BigNumberish,
      _payload: IPluginSetup.SetupPayloadStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  reset: TypedContractMethod<[], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mockHelperCount"
  ): TypedContractMethod<[_helpersCount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mockPermissionIndexes"
  ): TypedContractMethod<
    [_lowerIndex: BigNumberish, _upperIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareInstallation"
  ): TypedContractMethod<
    [_dao: AddressLike, _data: BytesLike],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        plugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareUninstallation"
  ): TypedContractMethod<
    [_dao: AddressLike, _payload: IPluginSetup.SetupPayloadStruct],
    [PermissionLib.MultiTargetPermissionStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareUpdate"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _currentBuild: BigNumberish,
      _payload: IPluginSetup.SetupPayloadStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "InstallationPrepared"
  ): TypedContractEvent<
    InstallationPreparedEvent.InputTuple,
    InstallationPreparedEvent.OutputTuple,
    InstallationPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UninstallationPrepared"
  ): TypedContractEvent<
    UninstallationPreparedEvent.InputTuple,
    UninstallationPreparedEvent.OutputTuple,
    UninstallationPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePrepared"
  ): TypedContractEvent<
    UpdatePreparedEvent.InputTuple,
    UpdatePreparedEvent.OutputTuple,
    UpdatePreparedEvent.OutputObject
  >;
  getEvent(
    key: "amazing"
  ): TypedContractEvent<
    amazingEvent.InputTuple,
    amazingEvent.OutputTuple,
    amazingEvent.OutputObject
  >;

  filters: {
    "InstallationPrepared(address,bytes)": TypedContractEvent<
      InstallationPreparedEvent.InputTuple,
      InstallationPreparedEvent.OutputTuple,
      InstallationPreparedEvent.OutputObject
    >;
    InstallationPrepared: TypedContractEvent<
      InstallationPreparedEvent.InputTuple,
      InstallationPreparedEvent.OutputTuple,
      InstallationPreparedEvent.OutputObject
    >;

    "UninstallationPrepared(address,tuple)": TypedContractEvent<
      UninstallationPreparedEvent.InputTuple,
      UninstallationPreparedEvent.OutputTuple,
      UninstallationPreparedEvent.OutputObject
    >;
    UninstallationPrepared: TypedContractEvent<
      UninstallationPreparedEvent.InputTuple,
      UninstallationPreparedEvent.OutputTuple,
      UninstallationPreparedEvent.OutputObject
    >;

    "UpdatePrepared(address,uint16,tuple)": TypedContractEvent<
      UpdatePreparedEvent.InputTuple,
      UpdatePreparedEvent.OutputTuple,
      UpdatePreparedEvent.OutputObject
    >;
    UpdatePrepared: TypedContractEvent<
      UpdatePreparedEvent.InputTuple,
      UpdatePreparedEvent.OutputTuple,
      UpdatePreparedEvent.OutputObject
    >;

    "amazing(uint256)": TypedContractEvent<
      amazingEvent.InputTuple,
      amazingEvent.OutputTuple,
      amazingEvent.OutputObject
    >;
    amazing: TypedContractEvent<
      amazingEvent.InputTuple,
      amazingEvent.OutputTuple,
      amazingEvent.OutputObject
    >;
  };
}
