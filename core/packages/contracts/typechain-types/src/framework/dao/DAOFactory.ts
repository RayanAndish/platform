/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type PluginSetupRefStruct = {
  versionTag: PluginRepo.TagStruct;
  pluginSetupRepo: AddressLike;
};

export type PluginSetupRefStructOutput = [
  versionTag: PluginRepo.TagStructOutput,
  pluginSetupRepo: string
] & { versionTag: PluginRepo.TagStructOutput; pluginSetupRepo: string };

export declare namespace DAOFactory {
  export type DAOSettingsStruct = {
    trustedForwarder: AddressLike;
    daoURI: string;
    subdomain: string;
    metadata: BytesLike;
  };

  export type DAOSettingsStructOutput = [
    trustedForwarder: string,
    daoURI: string,
    subdomain: string,
    metadata: string
  ] & {
    trustedForwarder: string;
    daoURI: string;
    subdomain: string;
    metadata: string;
  };

  export type PluginSettingsStruct = {
    pluginSetupRef: PluginSetupRefStruct;
    data: BytesLike;
  };

  export type PluginSettingsStructOutput = [
    pluginSetupRef: PluginSetupRefStructOutput,
    data: string
  ] & { pluginSetupRef: PluginSetupRefStructOutput; data: string };

  export type InstalledPluginStruct = {
    plugin: AddressLike;
    preparedSetupData: IPluginSetup.PreparedSetupDataStruct;
  };

  export type InstalledPluginStructOutput = [
    plugin: string,
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput
  ] & {
    plugin: string;
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
  };
}

export declare namespace PluginRepo {
  export type TagStruct = { release: BigNumberish; build: BigNumberish };

  export type TagStructOutput = [release: bigint, build: bigint] & {
    release: bigint;
    build: bigint;
  };
}

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };
}

export declare namespace IPluginSetup {
  export type PreparedSetupDataStruct = {
    helpers: AddressLike[];
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type PreparedSetupDataStructOutput = [
    helpers: string[],
    permissions: PermissionLib.MultiTargetPermissionStructOutput[]
  ] & {
    helpers: string[];
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };
}

export interface DAOFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createDao"
      | "daoBase"
      | "daoRegistry"
      | "pluginSetupProcessor"
      | "protocolVersion"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDao",
    values: [DAOFactory.DAOSettingsStruct, DAOFactory.PluginSettingsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "daoBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginSetupProcessor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "createDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginSetupProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface DAOFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DAOFactory;
  waitForDeployment(): Promise<this>;

  interface: DAOFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createDao: TypedContractMethod<
    [
      _daoSettings: DAOFactory.DAOSettingsStruct,
      _pluginSettings: DAOFactory.PluginSettingsStruct[]
    ],
    [
      [string, DAOFactory.InstalledPluginStructOutput[]] & {
        createdDao: string;
        installedPlugins: DAOFactory.InstalledPluginStructOutput[];
      }
    ],
    "nonpayable"
  >;

  daoBase: TypedContractMethod<[], [string], "view">;

  daoRegistry: TypedContractMethod<[], [string], "view">;

  pluginSetupProcessor: TypedContractMethod<[], [string], "view">;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createDao"
  ): TypedContractMethod<
    [
      _daoSettings: DAOFactory.DAOSettingsStruct,
      _pluginSettings: DAOFactory.PluginSettingsStruct[]
    ],
    [
      [string, DAOFactory.InstalledPluginStructOutput[]] & {
        createdDao: string;
        installedPlugins: DAOFactory.InstalledPluginStructOutput[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoBase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pluginSetupProcessor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
