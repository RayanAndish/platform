/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type PluginSetupRefStruct = {
  versionTag: PluginRepo.TagStruct;
  pluginSetupRepo: AddressLike;
};

export type PluginSetupRefStructOutput = [
  versionTag: PluginRepo.TagStructOutput,
  pluginSetupRepo: string
] & { versionTag: PluginRepo.TagStructOutput; pluginSetupRepo: string };

export declare namespace PluginRepo {
  export type TagStruct = { release: BigNumberish; build: BigNumberish };

  export type TagStructOutput = [release: bigint, build: bigint] & {
    release: bigint;
    build: bigint;
  };
}

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };
}

export declare namespace IPluginSetup {
  export type PreparedSetupDataStruct = {
    helpers: AddressLike[];
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type PreparedSetupDataStructOutput = [
    helpers: string[],
    permissions: PermissionLib.MultiTargetPermissionStructOutput[]
  ] & {
    helpers: string[];
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };

  export type SetupPayloadStruct = {
    plugin: AddressLike;
    currentHelpers: AddressLike[];
    data: BytesLike;
  };

  export type SetupPayloadStructOutput = [
    plugin: string,
    currentHelpers: string[],
    data: string
  ] & { plugin: string; currentHelpers: string[]; data: string };
}

export declare namespace PluginSetupProcessor {
  export type ApplyInstallationParamsStruct = {
    pluginSetupRef: PluginSetupRefStruct;
    plugin: AddressLike;
    permissions: PermissionLib.MultiTargetPermissionStruct[];
    helpersHash: BytesLike;
  };

  export type ApplyInstallationParamsStructOutput = [
    pluginSetupRef: PluginSetupRefStructOutput,
    plugin: string,
    permissions: PermissionLib.MultiTargetPermissionStructOutput[],
    helpersHash: string
  ] & {
    pluginSetupRef: PluginSetupRefStructOutput;
    plugin: string;
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
    helpersHash: string;
  };

  export type ApplyUninstallationParamsStruct = {
    plugin: AddressLike;
    pluginSetupRef: PluginSetupRefStruct;
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type ApplyUninstallationParamsStructOutput = [
    plugin: string,
    pluginSetupRef: PluginSetupRefStructOutput,
    permissions: PermissionLib.MultiTargetPermissionStructOutput[]
  ] & {
    plugin: string;
    pluginSetupRef: PluginSetupRefStructOutput;
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };

  export type ApplyUpdateParamsStruct = {
    plugin: AddressLike;
    pluginSetupRef: PluginSetupRefStruct;
    initData: BytesLike;
    permissions: PermissionLib.MultiTargetPermissionStruct[];
    helpersHash: BytesLike;
  };

  export type ApplyUpdateParamsStructOutput = [
    plugin: string,
    pluginSetupRef: PluginSetupRefStructOutput,
    initData: string,
    permissions: PermissionLib.MultiTargetPermissionStructOutput[],
    helpersHash: string
  ] & {
    plugin: string;
    pluginSetupRef: PluginSetupRefStructOutput;
    initData: string;
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
    helpersHash: string;
  };

  export type PrepareInstallationParamsStruct = {
    pluginSetupRef: PluginSetupRefStruct;
    data: BytesLike;
  };

  export type PrepareInstallationParamsStructOutput = [
    pluginSetupRef: PluginSetupRefStructOutput,
    data: string
  ] & { pluginSetupRef: PluginSetupRefStructOutput; data: string };

  export type PrepareUninstallationParamsStruct = {
    pluginSetupRef: PluginSetupRefStruct;
    setupPayload: IPluginSetup.SetupPayloadStruct;
  };

  export type PrepareUninstallationParamsStructOutput = [
    pluginSetupRef: PluginSetupRefStructOutput,
    setupPayload: IPluginSetup.SetupPayloadStructOutput
  ] & {
    pluginSetupRef: PluginSetupRefStructOutput;
    setupPayload: IPluginSetup.SetupPayloadStructOutput;
  };

  export type PrepareUpdateParamsStruct = {
    currentVersionTag: PluginRepo.TagStruct;
    newVersionTag: PluginRepo.TagStruct;
    pluginSetupRepo: AddressLike;
    setupPayload: IPluginSetup.SetupPayloadStruct;
  };

  export type PrepareUpdateParamsStructOutput = [
    currentVersionTag: PluginRepo.TagStructOutput,
    newVersionTag: PluginRepo.TagStructOutput,
    pluginSetupRepo: string,
    setupPayload: IPluginSetup.SetupPayloadStructOutput
  ] & {
    currentVersionTag: PluginRepo.TagStructOutput;
    newVersionTag: PluginRepo.TagStructOutput;
    pluginSetupRepo: string;
    setupPayload: IPluginSetup.SetupPayloadStructOutput;
  };
}

export interface PluginSetupProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPLY_INSTALLATION_PERMISSION_ID"
      | "APPLY_UNINSTALLATION_PERMISSION_ID"
      | "APPLY_UPDATE_PERMISSION_ID"
      | "applyInstallation"
      | "applyUninstallation"
      | "applyUpdate"
      | "prepareInstallation"
      | "prepareUninstallation"
      | "prepareUpdate"
      | "protocolVersion"
      | "repoRegistry"
      | "states"
      | "validatePreparedSetupId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InstallationApplied"
      | "InstallationPrepared"
      | "UninstallationApplied"
      | "UninstallationPrepared"
      | "UpdateApplied"
      | "UpdatePrepared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPLY_INSTALLATION_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APPLY_UNINSTALLATION_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APPLY_UPDATE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyInstallation",
    values: [AddressLike, PluginSetupProcessor.ApplyInstallationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "applyUninstallation",
    values: [AddressLike, PluginSetupProcessor.ApplyUninstallationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "applyUpdate",
    values: [AddressLike, PluginSetupProcessor.ApplyUpdateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareInstallation",
    values: [AddressLike, PluginSetupProcessor.PrepareInstallationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUninstallation",
    values: [
      AddressLike,
      PluginSetupProcessor.PrepareUninstallationParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUpdate",
    values: [AddressLike, PluginSetupProcessor.PrepareUpdateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "states", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "validatePreparedSetupId",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPLY_INSTALLATION_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APPLY_UNINSTALLATION_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APPLY_UPDATE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyUninstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUninstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "states", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePreparedSetupId",
    data: BytesLike
  ): Result;
}

export namespace InstallationAppliedEvent {
  export type InputTuple = [
    dao: AddressLike,
    plugin: AddressLike,
    preparedSetupId: BytesLike,
    appliedSetupId: BytesLike
  ];
  export type OutputTuple = [
    dao: string,
    plugin: string,
    preparedSetupId: string,
    appliedSetupId: string
  ];
  export interface OutputObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
    appliedSetupId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstallationPreparedEvent {
  export type InputTuple = [
    sender: AddressLike,
    dao: AddressLike,
    preparedSetupId: BytesLike,
    pluginSetupRepo: AddressLike,
    versionTag: PluginRepo.TagStruct,
    data: BytesLike,
    plugin: AddressLike,
    preparedSetupData: IPluginSetup.PreparedSetupDataStruct
  ];
  export type OutputTuple = [
    sender: string,
    dao: string,
    preparedSetupId: string,
    pluginSetupRepo: string,
    versionTag: PluginRepo.TagStructOutput,
    data: string,
    plugin: string,
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput
  ];
  export interface OutputObject {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo.TagStructOutput;
    data: string;
    plugin: string;
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UninstallationAppliedEvent {
  export type InputTuple = [
    dao: AddressLike,
    plugin: AddressLike,
    preparedSetupId: BytesLike
  ];
  export type OutputTuple = [
    dao: string,
    plugin: string,
    preparedSetupId: string
  ];
  export interface OutputObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UninstallationPreparedEvent {
  export type InputTuple = [
    sender: AddressLike,
    dao: AddressLike,
    preparedSetupId: BytesLike,
    pluginSetupRepo: AddressLike,
    versionTag: PluginRepo.TagStruct,
    setupPayload: IPluginSetup.SetupPayloadStruct,
    permissions: PermissionLib.MultiTargetPermissionStruct[]
  ];
  export type OutputTuple = [
    sender: string,
    dao: string,
    preparedSetupId: string,
    pluginSetupRepo: string,
    versionTag: PluginRepo.TagStructOutput,
    setupPayload: IPluginSetup.SetupPayloadStructOutput,
    permissions: PermissionLib.MultiTargetPermissionStructOutput[]
  ];
  export interface OutputObject {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo.TagStructOutput;
    setupPayload: IPluginSetup.SetupPayloadStructOutput;
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAppliedEvent {
  export type InputTuple = [
    dao: AddressLike,
    plugin: AddressLike,
    preparedSetupId: BytesLike,
    appliedSetupId: BytesLike
  ];
  export type OutputTuple = [
    dao: string,
    plugin: string,
    preparedSetupId: string,
    appliedSetupId: string
  ];
  export interface OutputObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
    appliedSetupId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePreparedEvent {
  export type InputTuple = [
    sender: AddressLike,
    dao: AddressLike,
    preparedSetupId: BytesLike,
    pluginSetupRepo: AddressLike,
    versionTag: PluginRepo.TagStruct,
    setupPayload: IPluginSetup.SetupPayloadStruct,
    preparedSetupData: IPluginSetup.PreparedSetupDataStruct,
    initData: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    dao: string,
    preparedSetupId: string,
    pluginSetupRepo: string,
    versionTag: PluginRepo.TagStructOutput,
    setupPayload: IPluginSetup.SetupPayloadStructOutput,
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput,
    initData: string
  ];
  export interface OutputObject {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo.TagStructOutput;
    setupPayload: IPluginSetup.SetupPayloadStructOutput;
    preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
    initData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PluginSetupProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): PluginSetupProcessor;
  waitForDeployment(): Promise<this>;

  interface: PluginSetupProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPLY_INSTALLATION_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  APPLY_UNINSTALLATION_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  APPLY_UPDATE_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  applyInstallation: TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.ApplyInstallationParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  applyUninstallation: TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.ApplyUninstallationParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  applyUpdate: TypedContractMethod<
    [_dao: AddressLike, _params: PluginSetupProcessor.ApplyUpdateParamsStruct],
    [void],
    "nonpayable"
  >;

  prepareInstallation: TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareInstallationParamsStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        plugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;

  prepareUninstallation: TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareUninstallationParamsStruct
    ],
    [PermissionLib.MultiTargetPermissionStructOutput[]],
    "nonpayable"
  >;

  prepareUpdate: TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareUpdateParamsStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  repoRegistry: TypedContractMethod<[], [string], "view">;

  states: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { blockNumber: bigint; currentAppliedSetupId: string }],
    "view"
  >;

  validatePreparedSetupId: TypedContractMethod<
    [pluginInstallationId: BytesLike, preparedSetupId: BytesLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPLY_INSTALLATION_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "APPLY_UNINSTALLATION_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "APPLY_UPDATE_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyInstallation"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.ApplyInstallationParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyUninstallation"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.ApplyUninstallationParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyUpdate"
  ): TypedContractMethod<
    [_dao: AddressLike, _params: PluginSetupProcessor.ApplyUpdateParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareInstallation"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareInstallationParamsStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        plugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareUninstallation"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareUninstallationParamsStruct
    ],
    [PermissionLib.MultiTargetPermissionStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareUpdate"
  ): TypedContractMethod<
    [
      _dao: AddressLike,
      _params: PluginSetupProcessor.PrepareUpdateParamsStruct
    ],
    [
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "repoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "states"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { blockNumber: bigint; currentAppliedSetupId: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatePreparedSetupId"
  ): TypedContractMethod<
    [pluginInstallationId: BytesLike, preparedSetupId: BytesLike],
    [void],
    "view"
  >;

  getEvent(
    key: "InstallationApplied"
  ): TypedContractEvent<
    InstallationAppliedEvent.InputTuple,
    InstallationAppliedEvent.OutputTuple,
    InstallationAppliedEvent.OutputObject
  >;
  getEvent(
    key: "InstallationPrepared"
  ): TypedContractEvent<
    InstallationPreparedEvent.InputTuple,
    InstallationPreparedEvent.OutputTuple,
    InstallationPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UninstallationApplied"
  ): TypedContractEvent<
    UninstallationAppliedEvent.InputTuple,
    UninstallationAppliedEvent.OutputTuple,
    UninstallationAppliedEvent.OutputObject
  >;
  getEvent(
    key: "UninstallationPrepared"
  ): TypedContractEvent<
    UninstallationPreparedEvent.InputTuple,
    UninstallationPreparedEvent.OutputTuple,
    UninstallationPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateApplied"
  ): TypedContractEvent<
    UpdateAppliedEvent.InputTuple,
    UpdateAppliedEvent.OutputTuple,
    UpdateAppliedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePrepared"
  ): TypedContractEvent<
    UpdatePreparedEvent.InputTuple,
    UpdatePreparedEvent.OutputTuple,
    UpdatePreparedEvent.OutputObject
  >;

  filters: {
    "InstallationApplied(address,address,bytes32,bytes32)": TypedContractEvent<
      InstallationAppliedEvent.InputTuple,
      InstallationAppliedEvent.OutputTuple,
      InstallationAppliedEvent.OutputObject
    >;
    InstallationApplied: TypedContractEvent<
      InstallationAppliedEvent.InputTuple,
      InstallationAppliedEvent.OutputTuple,
      InstallationAppliedEvent.OutputObject
    >;

    "InstallationPrepared(address,address,bytes32,address,tuple,bytes,address,tuple)": TypedContractEvent<
      InstallationPreparedEvent.InputTuple,
      InstallationPreparedEvent.OutputTuple,
      InstallationPreparedEvent.OutputObject
    >;
    InstallationPrepared: TypedContractEvent<
      InstallationPreparedEvent.InputTuple,
      InstallationPreparedEvent.OutputTuple,
      InstallationPreparedEvent.OutputObject
    >;

    "UninstallationApplied(address,address,bytes32)": TypedContractEvent<
      UninstallationAppliedEvent.InputTuple,
      UninstallationAppliedEvent.OutputTuple,
      UninstallationAppliedEvent.OutputObject
    >;
    UninstallationApplied: TypedContractEvent<
      UninstallationAppliedEvent.InputTuple,
      UninstallationAppliedEvent.OutputTuple,
      UninstallationAppliedEvent.OutputObject
    >;

    "UninstallationPrepared(address,address,bytes32,address,tuple,tuple,tuple[])": TypedContractEvent<
      UninstallationPreparedEvent.InputTuple,
      UninstallationPreparedEvent.OutputTuple,
      UninstallationPreparedEvent.OutputObject
    >;
    UninstallationPrepared: TypedContractEvent<
      UninstallationPreparedEvent.InputTuple,
      UninstallationPreparedEvent.OutputTuple,
      UninstallationPreparedEvent.OutputObject
    >;

    "UpdateApplied(address,address,bytes32,bytes32)": TypedContractEvent<
      UpdateAppliedEvent.InputTuple,
      UpdateAppliedEvent.OutputTuple,
      UpdateAppliedEvent.OutputObject
    >;
    UpdateApplied: TypedContractEvent<
      UpdateAppliedEvent.InputTuple,
      UpdateAppliedEvent.OutputTuple,
      UpdateAppliedEvent.OutputObject
    >;

    "UpdatePrepared(address,address,bytes32,address,tuple,tuple,tuple,bytes)": TypedContractEvent<
      UpdatePreparedEvent.InputTuple,
      UpdatePreparedEvent.OutputTuple,
      UpdatePreparedEvent.OutputObject
    >;
    UpdatePrepared: TypedContractEvent<
      UpdatePreparedEvent.InputTuple,
      UpdatePreparedEvent.OutputTuple,
      UpdatePreparedEvent.OutputObject
    >;
  };
}
