/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface PluginRepoFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPluginRepo"
      | "createPluginRepoWithFirstVersion"
      | "pluginRepoBase"
      | "pluginRepoRegistry"
      | "protocolVersion"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPluginRepo",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPluginRepoWithFirstVersion",
    values: [string, AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginRepoBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginRepoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPluginRepo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPluginRepoWithFirstVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginRepoBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginRepoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface PluginRepoFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PluginRepoFactory;
  waitForDeployment(): Promise<this>;

  interface: PluginRepoFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPluginRepo: TypedContractMethod<
    [_subdomain: string, _initialOwner: AddressLike],
    [string],
    "nonpayable"
  >;

  createPluginRepoWithFirstVersion: TypedContractMethod<
    [
      _subdomain: string,
      _pluginSetup: AddressLike,
      _maintainer: AddressLike,
      _releaseMetadata: BytesLike,
      _buildMetadata: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  pluginRepoBase: TypedContractMethod<[], [string], "view">;

  pluginRepoRegistry: TypedContractMethod<[], [string], "view">;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPluginRepo"
  ): TypedContractMethod<
    [_subdomain: string, _initialOwner: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPluginRepoWithFirstVersion"
  ): TypedContractMethod<
    [
      _subdomain: string,
      _pluginSetup: AddressLike,
      _maintainer: AddressLike,
      _releaseMetadata: BytesLike,
      _buildMetadata: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pluginRepoBase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pluginRepoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
