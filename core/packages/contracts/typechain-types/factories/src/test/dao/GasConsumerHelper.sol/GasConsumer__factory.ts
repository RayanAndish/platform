/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../../common";
import type {
  GasConsumer,
  GasConsumerInterface,
} from "../../../../../src/test/dao/GasConsumerHelper.sol/GasConsumer";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "consumeGas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460135760c8908160198239f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c9081636057361d14606c575063a329e8de14603257600080fd5b34606757602060031936011260675760043560005b818110604f57005b80600191600052600060205281604060002055016047565b600080fd5b346067576020600319360112606757602090600435600052600082526040600020548152f3fea2646970667358221220fa9857040ed1077095b01d7d39870495dfd96bac222dd682d87da6aadc34b70f64736f6c634300081c0033";

type GasConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasConsumer__factory extends ContractFactory {
  constructor(...args: GasConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GasConsumer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GasConsumer__factory {
    return super.connect(runner) as GasConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasConsumerInterface {
    return new Interface(_abi) as GasConsumerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GasConsumer {
    return new Contract(address, _abi, runner) as unknown as GasConsumer;
  }
}
