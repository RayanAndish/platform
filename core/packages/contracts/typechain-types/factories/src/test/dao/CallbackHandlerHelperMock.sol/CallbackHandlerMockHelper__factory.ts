/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../../common";
import type {
  CallbackHandlerMockHelper,
  CallbackHandlerMockHelperInterface,
} from "../../../../../src/test/dao/CallbackHandlerHelperMock.sol/CallbackHandlerMockHelper";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4",
      },
    ],
    name: "UnknownCallback",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "sig",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "CallbackReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "handleCallback",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4",
      },
    ],
    name: "registerCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610310908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816373be8553146100df575063fd292c5e1461003557600080fd5b346100da5760406003193601126100da5761004e6102ab565b602435907fffffffff00000000000000000000000000000000000000000000000000000000821682036100da577fffffffff0000000000000000000000000000000000000000000000000000000016600052600060205260406000209060e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055600080f35b600080fd5b346100da5760406003193601126100da576100f86102ab565b6024359067ffffffffffffffff82116100da57366023830112156100da57816004013567ffffffffffffffff811161027c57601f19603f81601f8401160116840184811067ffffffffffffffff82111761027c5760405280845236602482850101116100da5760208160009260247fffffffff0000000000000000000000000000000000000000000000000000000096018388013785010152168060005260006020527fffffffff0000000000000000000000000000000000000000000000000000000060406000205460e01b1691821561024b5790602092916040519033825260408583015280519081604084015260005b82811061023757505090606081601f19601f856000857f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b988601015201168101030190a2604051908152f35b8181018701518482016060015286016101eb565b507f4aa318c30000000000000000000000000000000000000000000000000000000060005260045260245260446000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600435907fffffffff00000000000000000000000000000000000000000000000000000000821682036100da5756fea26469706673582212202e20053cbb7a60a9290733dc0493f5817895f11e51c3638213940dfb403293cd64736f6c634300081c0033";

type CallbackHandlerMockHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallbackHandlerMockHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallbackHandlerMockHelper__factory extends ContractFactory {
  constructor(...args: CallbackHandlerMockHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CallbackHandlerMockHelper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): CallbackHandlerMockHelper__factory {
    return super.connect(runner) as CallbackHandlerMockHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallbackHandlerMockHelperInterface {
    return new Interface(_abi) as CallbackHandlerMockHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CallbackHandlerMockHelper {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as CallbackHandlerMockHelper;
  }
}
