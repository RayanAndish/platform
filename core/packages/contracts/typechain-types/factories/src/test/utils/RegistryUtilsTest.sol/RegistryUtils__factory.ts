/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../../common";
import type {
  RegistryUtils,
  RegistryUtilsInterface,
} from "../../../../../src/test/utils/RegistryUtilsTest.sol/RegistryUtils";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "subdomain",
        type: "string",
      },
    ],
    name: "isSubdomainValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761015e908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63a6fe91aa1461002757600080fd5b346100ad5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ad5760043567ffffffffffffffff81116100ad57366023820112156100ad5780600401359067ffffffffffffffff82116100ad5736602483830101116100ad5760209160246100a392016100b2565b6040519015158152f35b600080fd5b6000915b80831015610120576000928083013560f81c6060811180610116575b61010057602f81118061010c575b61010057602d146100f15750505090565b6001919293505b0191906100b6565b506001919293506100f8565b50603a81106100e0565b50607b81106100d2565b50505060019056fea2646970667358221220b67b872e2990901d8d02ec0830684e1256e2831e168497302bea3aa4d85aba7d64736f6c634300081c0033";

type RegistryUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryUtils__factory extends ContractFactory {
  constructor(...args: RegistryUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RegistryUtils & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RegistryUtils__factory {
    return super.connect(runner) as RegistryUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryUtilsInterface {
    return new Interface(_abi) as RegistryUtilsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RegistryUtils {
    return new Contract(address, _abi, runner) as unknown as RegistryUtils;
  }
}
