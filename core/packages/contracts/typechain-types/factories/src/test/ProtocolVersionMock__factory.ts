/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../common";
import type {
  ProtocolVersionMock,
  ProtocolVersionMockInterface,
} from "../../../src/test/ProtocolVersionMock";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "protocolVersion",
    outputs: [
      {
        internalType: "uint8[3]",
        name: "",
        type: "uint8[3]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610141908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c632ae9c6001461002757600080fd5b346101065760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101065760606040518181019080821067ffffffffffffffff8311176100d757829160405236903760405181810181811067ffffffffffffffff8211176100d75760405260018152600460208201526000604082015260405190816000905b600382106100be57505050f35b60208060019260ff8651168152019301910190916100b1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fdfea26469706673582212207010fc99dc3d6fa1e9df4a4af7130d22ba770c2a0567405d82752d58dc13d79f64736f6c634300081c0033";

type ProtocolVersionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProtocolVersionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProtocolVersionMock__factory extends ContractFactory {
  constructor(...args: ProtocolVersionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ProtocolVersionMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ProtocolVersionMock__factory {
    return super.connect(runner) as ProtocolVersionMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolVersionMockInterface {
    return new Interface(_abi) as ProtocolVersionMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProtocolVersionMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ProtocolVersionMock;
  }
}
