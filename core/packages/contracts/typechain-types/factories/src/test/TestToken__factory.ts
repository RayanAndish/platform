/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../common";
import type {
  TestToken,
  TestTokenInterface,
} from "../../../src/test/TestToken";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103e157610e1d80380380610019816103e6565b9283398101906060818303126103e15780516001600160401b0381116103e1578261004591830161040b565b60208201519092906001600160401b0381116103e15760409161006991840161040b565b91015182516001600160401b0381116102ea57600354600181811c911680156103d7575b60208210146102ca57601f8111610372575b506020601f821160011461030b5781929394600092610300575b50508160011b916000199060031b1c1916176003555b81516001600160401b0381116102ea57600454600181811c911680156102e0575b60208210146102ca57601f8111610265575b50602092601f821160011461020057928192936000926101f5575b50508160011b916000199060031b1c1916176004555b33156101b05760025481810180911161019a57600255336000526000602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36040516109a690816104778239f35b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b01519050388061011d565b601f198216936004600052806000209160005b86811061024d5750836001959610610234575b505050811b01600455610133565b015160001960f88460031b161c19169055388080610226565b91926020600181928685015181550194019201610213565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102c0575b601f0160051c01905b8181106102b45750610102565b600081556001016102a7565b909150819061029e565b634e487b7160e01b600052602260045260246000fd5b90607f16906100f0565b634e487b7160e01b600052604160045260246000fd5b0151905038806100b9565b601f198216906003600052806000209160005b81811061035a57509583600195969710610341575b505050811b016003556100cf565b015160001960f88460031b161c19169055388080610333565b9192602060018192868b01518155019401920161031e565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103cd575b601f0160051c01905b8181106103c1575061009f565b600081556001016103b4565b90915081906103ab565b90607f169061008d565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102ea57604052565b81601f820112156103e1578051906001600160401b0382116102ea5761043a601f8301601f19166020016103e6565b92828452602083830101116103e15760005b82811061046157505060206000918301015290565b8060208092840101518282870101520161044c56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461051e57508063095ea7b3146104f857806318160ddd146104da57806323b872dd146103f5578063313ce567146103d9578063395093511461037057806370a082311461033657806395d89b41146101e5578063a457c2d714610126578063a9059cbb146100f55763dd62ed3e1461009857600080fd5b346100f05760406003193601126100f0576100b1610645565b6001600160a01b036100c161065b565b911660005260016020526001600160a01b03604060002091166000526020526020604060002054604051908152f35b600080fd5b346100f05760406003193601126100f05761011b610111610645565b60243590336107ab565b602060405160018152f35b346100f05760406003193601126100f05761013f610645565b6024359033600052600160205260406000206001600160a01b0382166000526020526040600020549180831061017b5761011b92039033610671565b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b346100f05760006003193601126100f057604051600090600454918260011c6001841693841561032c575b60208210851461031857839482855290816000146102d65750600114610279575b5003601f01601f191681019067ffffffffffffffff8211818310176102635761025f829182604052826105fb565b0390f35b634e487b7160e01b600052604160045260246000fd5b6004600090815291507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8183106102ba5750508101602001601f19610231565b60209193508060019154838588010152019101909183926102a4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208581019190915291151560051b84019091019150601f199050610231565b602483634e487b7160e01b81526022600452fd5b90607f1690610210565b346100f05760206003193601126100f0576001600160a01b03610357610645565b1660005260006020526020604060002054604051908152f35b346100f05760406003193601126100f057610389610645565b33600052600160205260406000206001600160a01b03821660005260205260406000205460243581018091116103c35761011b9133610671565b634e487b7160e01b600052601160045260246000fd5b346100f05760006003193601126100f057602060405160128152f35b346100f05760606003193601126100f05761040e610645565b61041661065b565b604435906001600160a01b038316600052600160205260406000206001600160a01b033316600052602052604060002054927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840361047a575b61011b93506107ab565b828410610496576104918361011b95033383610671565b610470565b606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b346100f05760006003193601126100f0576020600254604051908152f35b346100f05760406003193601126100f05761011b610514610645565b6024359033610671565b346100f05760006003193601126100f057600090600354918260011c600184169384156105f1575b60208210851461031857839482855290816000146102d65750600114610594575003601f01601f191681019067ffffffffffffffff8211818310176102635761025f829182604052826105fb565b6003600090815291507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8183106105d55750508101602001601f19610231565b60209193508060019154838588010152019101909183926105bf565b90607f1690610546565b9190916020815282519283602083015260005b84811061062f575050601f19601f8460006040809697860101520116010190565b806020809284010151604082860101520161060e565b600435906001600160a01b03821682036100f057565b602435906001600160a01b03821682036100f057565b6001600160a01b0316908115610742576001600160a01b03169182156106d85760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b0316908115610906576001600160a01b031691821561089c5781600052600060205260406000205481811061083257817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209285600052600084520360406000205584600052600082526040600020818154019055604051908152a3565b608460405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220f9f0e3f504365001a279a8834d2fb97eadcd774dfaaf9ea1b5fa70de7955253564736f6c634300081c0033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      initialSupply,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      initialSupply,
      overrides || {}
    ) as Promise<
      TestToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestToken__factory {
    return super.connect(runner) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestToken {
    return new Contract(address, _abi, runner) as unknown as TestToken;
  }
}
