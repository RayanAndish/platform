/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  PermissionLib,
  PermissionLibInterface,
} from "../../../../../@aragon/osx-commons-contracts/src/permission/PermissionLib";
import type { NonPayableOverrides } from "../../../../../common";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "NO_CONDITION",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760939081601d823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c636dd02a5b14602657600080fd5b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260585780600060209252f35b600080fdfea26469706673582212209a68326c2666ba6c64ad4dce00169f690bb89be47ac2c67c071c41d38f81077e64736f6c634300081c0033";

type PermissionLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermissionLib__factory extends ContractFactory {
  constructor(...args: PermissionLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PermissionLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PermissionLib__factory {
    return super.connect(runner) as PermissionLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionLibInterface {
    return new Interface(_abi) as PermissionLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermissionLib {
    return new Contract(address, _abi, runner) as unknown as PermissionLib;
  }
}
