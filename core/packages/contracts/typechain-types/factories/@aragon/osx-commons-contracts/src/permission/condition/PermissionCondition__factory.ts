/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  PermissionCondition,
  PermissionConditionInterface,
} from "../../../../../../@aragon/osx-commons-contracts/src/permission/condition/PermissionCondition";
import { Contract, Interface, type ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address",
      },
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "isPermitted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolVersion",
    outputs: [
      {
        internalType: "uint8[3]",
        name: "",
        type: "uint8[3]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class PermissionCondition__factory {
  static readonly abi = _abi;
  static createInterface(): PermissionConditionInterface {
    return new Interface(_abi) as PermissionConditionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermissionCondition {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PermissionCondition;
  }
}
