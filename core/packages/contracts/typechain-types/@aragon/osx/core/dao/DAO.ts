/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type ActionStruct = {
  to: AddressLike;
  value: BigNumberish;
  data: BytesLike;
};

export type ActionStructOutput = [to: string, value: bigint, data: string] & {
  to: string;
  value: bigint;
  data: string;
};

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: BigNumberish;
    who: AddressLike;
    permissionId: BytesLike;
  };

  export type SingleTargetPermissionStructOutput = [
    operation: bigint,
    who: string,
    permissionId: string
  ] & { operation: bigint; who: string; permissionId: string };
}

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXECUTE_PERMISSION_ID"
      | "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
      | "ROOT_PERMISSION_ID"
      | "SET_METADATA_PERMISSION_ID"
      | "SET_TRUSTED_FORWARDER_PERMISSION_ID"
      | "UPGRADE_DAO_PERMISSION_ID"
      | "VALIDATE_SIGNATURE_PERMISSION_ID"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "daoURI"
      | "deposit"
      | "execute"
      | "getTrustedForwarder"
      | "grant"
      | "grantWithCondition"
      | "hasPermission"
      | "initialize"
      | "initializeFrom"
      | "isGranted"
      | "isValidSignature"
      | "protocolVersion"
      | "proxiableUUID"
      | "registerStandardCallback"
      | "revoke"
      | "setDaoURI"
      | "setMetadata"
      | "setSignatureValidator"
      | "setTrustedForwarder"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CallbackReceived"
      | "Deposited"
      | "Executed"
      | "Granted"
      | "Initialized"
      | "MetadataSet"
      | "NativeTokenDeposited"
      | "NewURI"
      | "Revoked"
      | "StandardCallbackRegistered"
      | "TrustedForwarderSet"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATE_SIGNATURE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [AddressLike, PermissionLib.SingleTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, ActionStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantWithCondition",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFrom",
    values: [[BigNumberish, BigNumberish, BigNumberish], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStandardCallback",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setDaoURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATE_SIGNATURE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStandardCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDaoURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallbackReceivedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sig: BytesLike,
    data: BytesLike
  ];
  export type OutputTuple = [sender: string, sig: string, data: string];
  export interface OutputObject {
    sender: string;
    sig: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    _reference: string
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    amount: bigint,
    _reference: string
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
    _reference: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    actor: AddressLike,
    callId: BytesLike,
    actions: ActionStruct[],
    allowFailureMap: BigNumberish,
    failureMap: BigNumberish,
    execResults: BytesLike[]
  ];
  export type OutputTuple = [
    actor: string,
    callId: string,
    actions: ActionStructOutput[],
    allowFailureMap: bigint,
    failureMap: bigint,
    execResults: string[]
  ];
  export interface OutputObject {
    actor: string;
    callId: string;
    actions: ActionStructOutput[];
    allowFailureMap: bigint;
    failureMap: bigint;
    execResults: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike,
    condition: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string,
    condition: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataSetEvent {
  export type InputTuple = [metadata: BytesLike];
  export type OutputTuple = [metadata: string];
  export interface OutputObject {
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeTokenDepositedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewURIEvent {
  export type InputTuple = [daoURI: string];
  export type OutputTuple = [daoURI: string];
  export interface OutputObject {
    daoURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StandardCallbackRegisteredEvent {
  export type InputTuple = [
    interfaceId: BytesLike,
    callbackSelector: BytesLike,
    magicNumber: BytesLike
  ];
  export type OutputTuple = [
    interfaceId: string,
    callbackSelector: string,
    magicNumber: string
  ];
  export interface OutputObject {
    interfaceId: string;
    callbackSelector: string;
    magicNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedForwarderSetEvent {
  export type InputTuple = [forwarder: AddressLike];
  export type OutputTuple = [forwarder: string];
  export interface OutputObject {
    forwarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXECUTE_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  REGISTER_STANDARD_CALLBACK_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  ROOT_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_METADATA_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  SET_TRUSTED_FORWARDER_PERMISSION_ID: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  UPGRADE_DAO_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  VALIDATE_SIGNATURE_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  applyMultiTargetPermissions: TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  applySingleTargetPermissions: TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  daoURI: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _reference: string],
    [void],
    "payable"
  >;

  execute: TypedContractMethod<
    [
      _callId: BytesLike,
      _actions: ActionStruct[],
      _allowFailureMap: BigNumberish
    ],
    [[string[], bigint] & { execResults: string[]; failureMap: bigint }],
    "nonpayable"
  >;

  getTrustedForwarder: TypedContractMethod<[], [string], "view">;

  grant: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  grantWithCondition: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  hasPermission: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _metadata: BytesLike,
      _initialOwner: AddressLike,
      _trustedForwarder: AddressLike,
      daoURI_: string
    ],
    [void],
    "nonpayable"
  >;

  initializeFrom: TypedContractMethod<
    [
      _previousProtocolVersion: [BigNumberish, BigNumberish, BigNumberish],
      _initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isGranted: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerStandardCallback: TypedContractMethod<
    [
      _interfaceId: BytesLike,
      _callbackSelector: BytesLike,
      _magicNumber: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  setDaoURI: TypedContractMethod<[newDaoURI: string], [void], "nonpayable">;

  setMetadata: TypedContractMethod<
    [_metadata: BytesLike],
    [void],
    "nonpayable"
  >;

  setSignatureValidator: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "view"
  >;

  setTrustedForwarder: TypedContractMethod<
    [_newTrustedForwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXECUTE_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_METADATA_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SET_TRUSTED_FORWARDER_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_DAO_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATE_SIGNATURE_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyMultiTargetPermissions"
  ): TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applySingleTargetPermissions"
  ): TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _reference: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      _callId: BytesLike,
      _actions: ActionStruct[],
      _allowFailureMap: BigNumberish
    ],
    [[string[], bigint] & { execResults: string[]; failureMap: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTrustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantWithCondition"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _metadata: BytesLike,
      _initialOwner: AddressLike,
      _trustedForwarder: AddressLike,
      daoURI_: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeFrom"
  ): TypedContractMethod<
    [
      _previousProtocolVersion: [BigNumberish, BigNumberish, BigNumberish],
      _initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isGranted"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerStandardCallback"
  ): TypedContractMethod<
    [
      _interfaceId: BytesLike,
      _callbackSelector: BytesLike,
      _magicNumber: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDaoURI"
  ): TypedContractMethod<[newDaoURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<[_metadata: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSignatureValidator"
  ): TypedContractMethod<[arg0: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "setTrustedForwarder"
  ): TypedContractMethod<
    [_newTrustedForwarder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CallbackReceived"
  ): TypedContractEvent<
    CallbackReceivedEvent.InputTuple,
    CallbackReceivedEvent.OutputTuple,
    CallbackReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Granted"
  ): TypedContractEvent<
    GrantedEvent.InputTuple,
    GrantedEvent.OutputTuple,
    GrantedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataSet"
  ): TypedContractEvent<
    MetadataSetEvent.InputTuple,
    MetadataSetEvent.OutputTuple,
    MetadataSetEvent.OutputObject
  >;
  getEvent(
    key: "NativeTokenDeposited"
  ): TypedContractEvent<
    NativeTokenDepositedEvent.InputTuple,
    NativeTokenDepositedEvent.OutputTuple,
    NativeTokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "NewURI"
  ): TypedContractEvent<
    NewURIEvent.InputTuple,
    NewURIEvent.OutputTuple,
    NewURIEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;
  getEvent(
    key: "StandardCallbackRegistered"
  ): TypedContractEvent<
    StandardCallbackRegisteredEvent.InputTuple,
    StandardCallbackRegisteredEvent.OutputTuple,
    StandardCallbackRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedForwarderSet"
  ): TypedContractEvent<
    TrustedForwarderSetEvent.InputTuple,
    TrustedForwarderSetEvent.OutputTuple,
    TrustedForwarderSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CallbackReceived(address,bytes4,bytes)": TypedContractEvent<
      CallbackReceivedEvent.InputTuple,
      CallbackReceivedEvent.OutputTuple,
      CallbackReceivedEvent.OutputObject
    >;
    CallbackReceived: TypedContractEvent<
      CallbackReceivedEvent.InputTuple,
      CallbackReceivedEvent.OutputTuple,
      CallbackReceivedEvent.OutputObject
    >;

    "Deposited(address,address,uint256,string)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Executed(address,bytes32,tuple[],uint256,uint256,bytes[])": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "Granted(bytes32,address,address,address,address)": TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;
    Granted: TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetadataSet(bytes)": TypedContractEvent<
      MetadataSetEvent.InputTuple,
      MetadataSetEvent.OutputTuple,
      MetadataSetEvent.OutputObject
    >;
    MetadataSet: TypedContractEvent<
      MetadataSetEvent.InputTuple,
      MetadataSetEvent.OutputTuple,
      MetadataSetEvent.OutputObject
    >;

    "NativeTokenDeposited(address,uint256)": TypedContractEvent<
      NativeTokenDepositedEvent.InputTuple,
      NativeTokenDepositedEvent.OutputTuple,
      NativeTokenDepositedEvent.OutputObject
    >;
    NativeTokenDeposited: TypedContractEvent<
      NativeTokenDepositedEvent.InputTuple,
      NativeTokenDepositedEvent.OutputTuple,
      NativeTokenDepositedEvent.OutputObject
    >;

    "NewURI(string)": TypedContractEvent<
      NewURIEvent.InputTuple,
      NewURIEvent.OutputTuple,
      NewURIEvent.OutputObject
    >;
    NewURI: TypedContractEvent<
      NewURIEvent.InputTuple,
      NewURIEvent.OutputTuple,
      NewURIEvent.OutputObject
    >;

    "Revoked(bytes32,address,address,address)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;

    "StandardCallbackRegistered(bytes4,bytes4,bytes4)": TypedContractEvent<
      StandardCallbackRegisteredEvent.InputTuple,
      StandardCallbackRegisteredEvent.OutputTuple,
      StandardCallbackRegisteredEvent.OutputObject
    >;
    StandardCallbackRegistered: TypedContractEvent<
      StandardCallbackRegisteredEvent.InputTuple,
      StandardCallbackRegisteredEvent.OutputTuple,
      StandardCallbackRegisteredEvent.OutputObject
    >;

    "TrustedForwarderSet(address)": TypedContractEvent<
      TrustedForwarderSetEvent.InputTuple,
      TrustedForwarderSetEvent.OutputTuple,
      TrustedForwarderSetEvent.OutputObject
    >;
    TrustedForwarderSet: TypedContractEvent<
      TrustedForwarderSetEvent.InputTuple,
      TrustedForwarderSetEvent.OutputTuple,
      TrustedForwarderSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
