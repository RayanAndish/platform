/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: BigNumberish;
    where: AddressLike;
    who: AddressLike;
    condition: AddressLike;
    permissionId: BytesLike;
  };

  export type MultiTargetPermissionStructOutput = [
    operation: bigint,
    where: string,
    who: string,
    condition: string,
    permissionId: string
  ] & {
    operation: bigint;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: BigNumberish;
    who: AddressLike;
    permissionId: BytesLike;
  };

  export type SingleTargetPermissionStructOutput = [
    operation: bigint,
    who: string,
    permissionId: string
  ] & { operation: bigint; who: string; permissionId: string };
}

export declare namespace PluginRepo {
  export type TagStruct = { release: BigNumberish; build: BigNumberish };

  export type TagStructOutput = [release: bigint, build: bigint] & {
    release: bigint;
    build: bigint;
  };

  export type VersionStruct = {
    tag: PluginRepo.TagStruct;
    pluginSetup: AddressLike;
    buildMetadata: BytesLike;
  };

  export type VersionStructOutput = [
    tag: PluginRepo.TagStructOutput,
    pluginSetup: string,
    buildMetadata: string
  ] & {
    tag: PluginRepo.TagStructOutput;
    pluginSetup: string;
    buildMetadata: string;
  };
}

export interface PluginRepoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAINTAINER_PERMISSION_ID"
      | "ROOT_PERMISSION_ID"
      | "UPGRADE_REPO_PERMISSION_ID"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "buildCount"
      | "createVersion"
      | "getLatestVersion(address)"
      | "getLatestVersion(uint8)"
      | "getVersion(bytes32)"
      | "getVersion((uint8,uint16))"
      | "grant"
      | "grantWithCondition"
      | "initialize"
      | "initializeFrom"
      | "isGranted"
      | "latestRelease"
      | "protocolVersion"
      | "proxiableUUID"
      | "revoke"
      | "supportsInterface"
      | "updateReleaseMetadata"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Granted"
      | "Initialized"
      | "ReleaseMetadataUpdated"
      | "Revoked"
      | "Upgraded"
      | "VersionCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAINTAINER_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_REPO_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [AddressLike, PermissionLib.SingleTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buildCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVersion",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestVersion(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestVersion(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion((uint8,uint16))",
    values: [PluginRepo.TagStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantWithCondition",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFrom",
    values: [[BigNumberish, BigNumberish, BigNumberish], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReleaseMetadata",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAINTAINER_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_REPO_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buildCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestVersion(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestVersion(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersion(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersion((uint8,uint16))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReleaseMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike,
    condition: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string,
    condition: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleaseMetadataUpdatedEvent {
  export type InputTuple = [release: BigNumberish, releaseMetadata: BytesLike];
  export type OutputTuple = [release: bigint, releaseMetadata: string];
  export interface OutputObject {
    release: bigint;
    releaseMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    here: AddressLike,
    where: AddressLike,
    who: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    here: string,
    where: string,
    who: string
  ];
  export interface OutputObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VersionCreatedEvent {
  export type InputTuple = [
    release: BigNumberish,
    build: BigNumberish,
    pluginSetup: AddressLike,
    buildMetadata: BytesLike
  ];
  export type OutputTuple = [
    release: bigint,
    build: bigint,
    pluginSetup: string,
    buildMetadata: string
  ];
  export interface OutputObject {
    release: bigint;
    build: bigint;
    pluginSetup: string;
    buildMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PluginRepo extends BaseContract {
  connect(runner?: ContractRunner | null): PluginRepo;
  waitForDeployment(): Promise<this>;

  interface: PluginRepoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAINTAINER_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  ROOT_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  UPGRADE_REPO_PERMISSION_ID: TypedContractMethod<[], [string], "view">;

  applyMultiTargetPermissions: TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  applySingleTargetPermissions: TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;

  buildCount: TypedContractMethod<[_release: BigNumberish], [bigint], "view">;

  createVersion: TypedContractMethod<
    [
      _release: BigNumberish,
      _pluginSetup: AddressLike,
      _buildMetadata: BytesLike,
      _releaseMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "getLatestVersion(address)": TypedContractMethod<
    [_pluginSetup: AddressLike],
    [PluginRepo.VersionStructOutput],
    "view"
  >;

  "getLatestVersion(uint8)": TypedContractMethod<
    [_release: BigNumberish],
    [PluginRepo.VersionStructOutput],
    "view"
  >;

  "getVersion(bytes32)": TypedContractMethod<
    [_tagHash: BytesLike],
    [PluginRepo.VersionStructOutput],
    "view"
  >;

  "getVersion((uint8,uint16))": TypedContractMethod<
    [_tag: PluginRepo.TagStruct],
    [PluginRepo.VersionStructOutput],
    "view"
  >;

  grant: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  grantWithCondition: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeFrom: TypedContractMethod<
    [
      _previousProtocolVersion: [BigNumberish, BigNumberish, BigNumberish],
      _initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isGranted: TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;

  latestRelease: TypedContractMethod<[], [bigint], "view">;

  protocolVersion: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  revoke: TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateReleaseMetadata: TypedContractMethod<
    [_release: BigNumberish, _releaseMetadata: BytesLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAINTAINER_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_REPO_PERMISSION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyMultiTargetPermissions"
  ): TypedContractMethod<
    [_items: PermissionLib.MultiTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applySingleTargetPermissions"
  ): TypedContractMethod<
    [_where: AddressLike, items: PermissionLib.SingleTargetPermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buildCount"
  ): TypedContractMethod<[_release: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createVersion"
  ): TypedContractMethod<
    [
      _release: BigNumberish,
      _pluginSetup: AddressLike,
      _buildMetadata: BytesLike,
      _releaseMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLatestVersion(address)"
  ): TypedContractMethod<
    [_pluginSetup: AddressLike],
    [PluginRepo.VersionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestVersion(uint8)"
  ): TypedContractMethod<
    [_release: BigNumberish],
    [PluginRepo.VersionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion(bytes32)"
  ): TypedContractMethod<
    [_tagHash: BytesLike],
    [PluginRepo.VersionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion((uint8,uint16))"
  ): TypedContractMethod<
    [_tag: PluginRepo.TagStruct],
    [PluginRepo.VersionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantWithCondition"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _condition: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[initialOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeFrom"
  ): TypedContractMethod<
    [
      _previousProtocolVersion: [BigNumberish, BigNumberish, BigNumberish],
      _initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isGranted"
  ): TypedContractMethod<
    [
      _where: AddressLike,
      _who: AddressLike,
      _permissionId: BytesLike,
      _data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestRelease"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [_where: AddressLike, _who: AddressLike, _permissionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateReleaseMetadata"
  ): TypedContractMethod<
    [_release: BigNumberish, _releaseMetadata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Granted"
  ): TypedContractEvent<
    GrantedEvent.InputTuple,
    GrantedEvent.OutputTuple,
    GrantedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ReleaseMetadataUpdated"
  ): TypedContractEvent<
    ReleaseMetadataUpdatedEvent.InputTuple,
    ReleaseMetadataUpdatedEvent.OutputTuple,
    ReleaseMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VersionCreated"
  ): TypedContractEvent<
    VersionCreatedEvent.InputTuple,
    VersionCreatedEvent.OutputTuple,
    VersionCreatedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Granted(bytes32,address,address,address,address)": TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;
    Granted: TypedContractEvent<
      GrantedEvent.InputTuple,
      GrantedEvent.OutputTuple,
      GrantedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ReleaseMetadataUpdated(uint8,bytes)": TypedContractEvent<
      ReleaseMetadataUpdatedEvent.InputTuple,
      ReleaseMetadataUpdatedEvent.OutputTuple,
      ReleaseMetadataUpdatedEvent.OutputObject
    >;
    ReleaseMetadataUpdated: TypedContractEvent<
      ReleaseMetadataUpdatedEvent.InputTuple,
      ReleaseMetadataUpdatedEvent.OutputTuple,
      ReleaseMetadataUpdatedEvent.OutputObject
    >;

    "Revoked(bytes32,address,address,address)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VersionCreated(uint8,uint16,address,bytes)": TypedContractEvent<
      VersionCreatedEvent.InputTuple,
      VersionCreatedEvent.OutputTuple,
      VersionCreatedEvent.OutputObject
    >;
    VersionCreated: TypedContractEvent<
      VersionCreatedEvent.InputTuple,
      VersionCreatedEvent.OutputTuple,
      VersionCreatedEvent.OutputObject
    >;
  };
}
