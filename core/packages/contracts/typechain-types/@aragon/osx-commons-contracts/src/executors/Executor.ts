/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type ActionStruct = {
  to: AddressLike;
  value: BigNumberish;
  data: BytesLike;
};

export type ActionStructOutput = [to: string, value: bigint, data: string] & {
  to: string;
  value: bigint;
  data: string;
};

export interface ExecutorInterface extends Interface {
  getFunction(
    nameOrSignature: "execute" | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, ActionStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    actor: AddressLike,
    callId: BytesLike,
    actions: ActionStruct[],
    allowFailureMap: BigNumberish,
    failureMap: BigNumberish,
    execResults: BytesLike[]
  ];
  export type OutputTuple = [
    actor: string,
    callId: string,
    actions: ActionStructOutput[],
    allowFailureMap: bigint,
    failureMap: bigint,
    execResults: string[]
  ];
  export interface OutputObject {
    actor: string;
    callId: string;
    actions: ActionStructOutput[];
    allowFailureMap: bigint;
    failureMap: bigint;
    execResults: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Executor extends BaseContract {
  connect(runner?: ContractRunner | null): Executor;
  waitForDeployment(): Promise<this>;

  interface: ExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [
      _callId: BytesLike,
      _actions: ActionStruct[],
      _allowFailureMap: BigNumberish
    ],
    [[string[], bigint] & { execResults: string[]; failureMap: bigint }],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      _callId: BytesLike,
      _actions: ActionStruct[],
      _allowFailureMap: BigNumberish
    ],
    [[string[], bigint] & { execResults: string[]; failureMap: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;

  filters: {
    "Executed(address,bytes32,tuple[],uint256,uint256,bytes[])": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
  };
}
