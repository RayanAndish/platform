/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAO__factory>;
    getContractFactory(
      name: "Executor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Executor__factory>;
    getContractFactory(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutor__factory>;
    getContractFactory(
      name: "DaoAuthorizable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaoAuthorizable__factory>;
    getContractFactory(
      name: "DaoAuthorizableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaoAuthorizableUpgradeable__factory>;
    getContractFactory(
      name: "IPermissionCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermissionCondition__factory>;
    getContractFactory(
      name: "PermissionCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionCondition__factory>;
    getContractFactory(
      name: "PermissionLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionLib__factory>;
    getContractFactory(
      name: "IPlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlugin__factory>;
    getContractFactory(
      name: "Plugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Plugin__factory>;
    getContractFactory(
      name: "PluginCloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneable__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeable__factory>;
    getContractFactory(
      name: "IPluginSetup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginSetup__factory>;
    getContractFactory(
      name: "PluginSetup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginSetup__factory>;
    getContractFactory(
      name: "PluginUpgradeableSetup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUpgradeableSetup__factory>;
    getContractFactory(
      name: "ProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyFactory__factory>;
    getContractFactory(
      name: "IProtocolVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolVersion__factory>;
    getContractFactory(
      name: "ProtocolVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolVersion__factory>;
    getContractFactory(
      name: "DAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAO__factory>;
    getContractFactory(
      name: "IEIP4824",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP4824__factory>;
    getContractFactory(
      name: "PermissionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionManager__factory>;
    getContractFactory(
      name: "CallbackHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallbackHandler__factory>;
    getContractFactory(
      name: "DAORegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAORegistry__factory>;
    getContractFactory(
      name: "IPluginRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginRepo__factory>;
    getContractFactory(
      name: "PluginRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginRepo__factory>;
    getContractFactory(
      name: "PluginRepoRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginRepoRegistry__factory>;
    getContractFactory(
      name: "ENSSubdomainRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSSubdomainRegistrar__factory>;
    getContractFactory(
      name: "InterfaceBasedRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceBasedRegistry__factory>;
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSRegistry__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "ISupportsInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISupportsInterface__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABIResolver__factory>;
    getContractFactory(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddrResolver__factory>;
    getContractFactory(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentHashResolver__factory>;
    getContractFactory(
      name: "DNSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSResolver__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PubkeyResolver__factory>;
    getContractFactory(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TextResolver__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicResolver__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverBase__factory>;
    getContractFactory(
      name: "SupportsInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupportsInterface__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165StorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165StorageUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Consensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Consensus__factory>;
    getContractFactory(
      name: "ContractConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractConstants__factory>;
    getContractFactory(
      name: "DAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAO__factory>;
    getContractFactory(
      name: "IDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAO__factory>;
    getContractFactory(
      name: "IEIP4824",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP4824__factory>;
    getContractFactory(
      name: "Finance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Finance__factory>;
    getContractFactory(
      name: "ContractParameters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractParameters__factory>;
    getContractFactory(
      name: "AccControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccControl__factory>;
    getContractFactory(
      name: "PermissionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionManager__factory>;
    getContractFactory(
      name: "UserProfile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserProfile__factory>;
    getContractFactory(
      name: "ProjectMon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProjectMon__factory>;
    getContractFactory(
      name: "CustomHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomHash__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "Voting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>;
    getContractFactory(
      name: "DAOFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAOFactory__factory>;
    getContractFactory(
      name: "DAORegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAORegistry__factory>;
    getContractFactory(
      name: "IPluginRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginRepo__factory>;
    getContractFactory(
      name: "PlaceholderSetup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlaceholderSetup__factory>;
    getContractFactory(
      name: "PluginRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginRepo__factory>;
    getContractFactory(
      name: "PluginRepoFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginRepoFactory__factory>;
    getContractFactory(
      name: "PluginRepoRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginRepoRegistry__factory>;
    getContractFactory(
      name: "PluginSetupProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginSetupProcessor__factory>;
    getContractFactory(
      name: "ENSSubdomainRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSSubdomainRegistrar__factory>;
    getContractFactory(
      name: "InterfaceBasedRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceBasedRegistry__factory>;
    getContractFactory(
      name: "ActionExecute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ActionExecute__factory>;
    getContractFactory(
      name: "CallbackHandlerMockHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallbackHandlerMockHelper__factory>;
    getContractFactory(
      name: "GasConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasConsumer__factory>;
    getContractFactory(
      name: "PermissionConditionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionConditionMock__factory>;
    getContractFactory(
      name: "PermissionManagerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionManagerTest__factory>;
    getContractFactory(
      name: "PluginCloneableV1Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableV1Mock__factory>;
    getContractFactory(
      name: "PluginCloneableV1MockBad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableV1MockBad__factory>;
    getContractFactory(
      name: "PluginCloneableV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableV2Mock__factory>;
    getContractFactory(
      name: "PluginCloneableSetupV1Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableSetupV1Mock__factory>;
    getContractFactory(
      name: "PluginCloneableSetupV1MockBad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableSetupV1MockBad__factory>;
    getContractFactory(
      name: "PluginCloneableSetupV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginCloneableSetupV2Mock__factory>;
    getContractFactory(
      name: "PluginV1Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginV1Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableV1Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableV1Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableV2Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableV3Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableV3Mock__factory>;
    getContractFactory(
      name: "MockedHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockedHelper__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableSetupV1Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV1Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableSetupV1MockBad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV1MockBad__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableSetupV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV2Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableSetupV3Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV3Mock__factory>;
    getContractFactory(
      name: "PluginUUPSUpgradeableSetupV4Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV4Mock__factory>;
    getContractFactory(
      name: "ProtocolVersionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolVersionMock__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "ERC1155Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Mock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC721Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Mock__factory>;
    getContractFactory(
      name: "InterfaceBasedRegistryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceBasedRegistryMock__factory>;
    getContractFactory(
      name: "RegistryUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryUtils__factory>;

    getContractAt(
      name: "IDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAO>;
    getContractAt(
      name: "Executor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Executor>;
    getContractAt(
      name: "IExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutor>;
    getContractAt(
      name: "DaoAuthorizable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaoAuthorizable>;
    getContractAt(
      name: "DaoAuthorizableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaoAuthorizableUpgradeable>;
    getContractAt(
      name: "IPermissionCondition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermissionCondition>;
    getContractAt(
      name: "PermissionCondition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionCondition>;
    getContractAt(
      name: "PermissionLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionLib>;
    getContractAt(
      name: "IPlugin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlugin>;
    getContractAt(
      name: "Plugin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Plugin>;
    getContractAt(
      name: "PluginCloneable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneable>;
    getContractAt(
      name: "PluginUUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeable>;
    getContractAt(
      name: "IPluginSetup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginSetup>;
    getContractAt(
      name: "PluginSetup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginSetup>;
    getContractAt(
      name: "PluginUpgradeableSetup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUpgradeableSetup>;
    getContractAt(
      name: "ProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyFactory>;
    getContractAt(
      name: "IProtocolVersion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolVersion>;
    getContractAt(
      name: "ProtocolVersion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolVersion>;
    getContractAt(
      name: "DAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAO>;
    getContractAt(
      name: "IEIP4824",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP4824>;
    getContractAt(
      name: "PermissionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionManager>;
    getContractAt(
      name: "CallbackHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallbackHandler>;
    getContractAt(
      name: "DAORegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAORegistry>;
    getContractAt(
      name: "IPluginRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginRepo>;
    getContractAt(
      name: "PluginRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginRepo>;
    getContractAt(
      name: "PluginRepoRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginRepoRegistry>;
    getContractAt(
      name: "ENSSubdomainRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSSubdomainRegistrar>;
    getContractAt(
      name: "InterfaceBasedRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceBasedRegistry>;
    getContractAt(
      name: "ENS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "ENSRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSRegistry>;
    getContractAt(
      name: "IMulticallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "ISupportsInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISupportsInterface>;
    getContractAt(
      name: "Multicallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "ABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ABIResolver>;
    getContractAt(
      name: "AddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddrResolver>;
    getContractAt(
      name: "ContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentHashResolver>;
    getContractAt(
      name: "DNSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSResolver>;
    getContractAt(
      name: "IABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "InterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "PubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PubkeyResolver>;
    getContractAt(
      name: "TextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TextResolver>;
    getContractAt(
      name: "INameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "PublicResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicResolver>;
    getContractAt(
      name: "Resolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "ResolverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverBase>;
    getContractAt(
      name: "SupportsInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupportsInterface>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165StorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165StorageUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Consensus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Consensus>;
    getContractAt(
      name: "ContractConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractConstants>;
    getContractAt(
      name: "DAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAO>;
    getContractAt(
      name: "IDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAO>;
    getContractAt(
      name: "IEIP4824",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP4824>;
    getContractAt(
      name: "Finance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Finance>;
    getContractAt(
      name: "ContractParameters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractParameters>;
    getContractAt(
      name: "AccControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccControl>;
    getContractAt(
      name: "PermissionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionManager>;
    getContractAt(
      name: "UserProfile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserProfile>;
    getContractAt(
      name: "ProjectMon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProjectMon>;
    getContractAt(
      name: "CustomHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomHash>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "Voting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>;
    getContractAt(
      name: "DAOFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAOFactory>;
    getContractAt(
      name: "DAORegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAORegistry>;
    getContractAt(
      name: "IPluginRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginRepo>;
    getContractAt(
      name: "PlaceholderSetup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlaceholderSetup>;
    getContractAt(
      name: "PluginRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginRepo>;
    getContractAt(
      name: "PluginRepoFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginRepoFactory>;
    getContractAt(
      name: "PluginRepoRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginRepoRegistry>;
    getContractAt(
      name: "PluginSetupProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginSetupProcessor>;
    getContractAt(
      name: "ENSSubdomainRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSSubdomainRegistrar>;
    getContractAt(
      name: "InterfaceBasedRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceBasedRegistry>;
    getContractAt(
      name: "ActionExecute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ActionExecute>;
    getContractAt(
      name: "CallbackHandlerMockHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallbackHandlerMockHelper>;
    getContractAt(
      name: "GasConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasConsumer>;
    getContractAt(
      name: "PermissionConditionMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionConditionMock>;
    getContractAt(
      name: "PermissionManagerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionManagerTest>;
    getContractAt(
      name: "PluginCloneableV1Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableV1Mock>;
    getContractAt(
      name: "PluginCloneableV1MockBad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableV1MockBad>;
    getContractAt(
      name: "PluginCloneableV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableV2Mock>;
    getContractAt(
      name: "PluginCloneableSetupV1Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableSetupV1Mock>;
    getContractAt(
      name: "PluginCloneableSetupV1MockBad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableSetupV1MockBad>;
    getContractAt(
      name: "PluginCloneableSetupV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginCloneableSetupV2Mock>;
    getContractAt(
      name: "PluginV1Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginV1Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableV1Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableV1Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableV2Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableV3Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableV3Mock>;
    getContractAt(
      name: "MockedHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockedHelper>;
    getContractAt(
      name: "PluginUUPSUpgradeableSetupV1Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV1Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableSetupV1MockBad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV1MockBad>;
    getContractAt(
      name: "PluginUUPSUpgradeableSetupV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV2Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableSetupV3Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV3Mock>;
    getContractAt(
      name: "PluginUUPSUpgradeableSetupV4Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginUUPSUpgradeableSetupV4Mock>;
    getContractAt(
      name: "ProtocolVersionMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolVersionMock>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "ERC1155Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Mock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC721Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Mock>;
    getContractAt(
      name: "InterfaceBasedRegistryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceBasedRegistryMock>;
    getContractAt(
      name: "RegistryUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryUtils>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
